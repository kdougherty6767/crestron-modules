/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
 #SYMBOL_NAME "Panasonic AW Camera PTZ"
// #HINT ""
// #DEFINE_CONSTANT
#CATEGORY "19" // Camera 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/

DIGITAL_INPUT PTZ_Left, PTZ_Right, PTZ_Up, PTZ_Down, Zoom_In, Zoom_Out, Focus_Near, Focus_Far, Auto_Focus,
_SKIP_, Preset_1, Preset_2, Preset_3, Preset_4, Preset_5, _SKIP_, Preset_1_Save, Preset_2_Save, Preset_3_Save, Preset_4_Save, Preset_5_Save;
ANALOG_INPUT PT_Speed;
STRING_INPUT Response$[10];
 
ANALOG_OUTPUT _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, 
_SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, PT_Speed_FB;
STRING_OUTPUT Command$;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER nPanning, nTilting, nZooming, nFocussing, nAutoFocus, nVelocity;
// LONG_INTEGER//
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING CommandToSend$[50];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH PTZ_Left
{
	INTEGER nSpeed;
	
	nSpeed = 50 - nVelocity;
	nPanning = 1;
	makestring(CommandToSend$,"P%02d",nSpeed);  
	Command$ = CommandToSend$; 
}

RELEASE PTZ_Left
{
    IF(nPanning)
    {
    	Command$ = "P50";
    	nPanning = 0;
    }
}

PUSH PTZ_Right
{
	INTEGER nSpeed;
	
	nSpeed = nVelocity + 50;
	nPanning = 1;
	makestring(CommandToSend$,"P%02d",nSpeed);  
	Command$ = CommandToSend$; 
}

RELEASE PTZ_Right
{
    IF(nPanning)
    {
    	Command$ = "P50";
    	nPanning = 0;
    }
}

PUSH PTZ_Down

{
	INTEGER nSpeed;
	
	nSpeed = 50 - nVelocity;
	nTilting = 1;
	makestring(CommandToSend$,"T%02d",nSpeed);  
	Command$ = CommandToSend$; 
}

RELEASE PTZ_Down
{
    IF(nTilting)
    {
    	Command$ = "T50";
    	nTilting = 0;
    }
}
  
PUSH PTZ_Up
{
	INTEGER nSpeed;

	nSpeed = nVelocity + 50;
	nTilting = 1;
	makestring(CommandToSend$,"T%02d",nSpeed);  
	Command$ = CommandToSend$; 
}

RELEASE PTZ_Up
{
    IF(nTilting)
    {
    	Command$ = "T50";
    	nTilting = 0;
    }
}

PUSH Zoom_In
{
 	nZooming = 1;
 	Command$ = "Z90";
}

RELEASE Zoom_In
{
 	IF(nZooming)
 	{
 		nZooming = 0;
 		Command$ = "Z50";
 	}
}

PUSH Zoom_Out
{
 	nZooming = 1;
 	Command$ = "Z10";
}

RELEASE Zoom_Out
{
 	IF(nZooming)
 	{
 		nZooming = 0;
 		Command$ = "Z50";
 	}
}
 
PUSH Focus_Far
{
 	nFocussing = 1;
 	Command$ = "F75";
}

RELEASE Focus_Far
{
 	IF(nFocussing)
 	{
 		nFocussing = 0;
 		Command$ = "F50";
 	}
}

PUSH Focus_Near
{
 	nFocussing = 1;
 	Command$ = "F25";
}

RELEASE Focus_Near
{
 	IF(nFocussing)
 	{
 		nFocussing = 0;
 		Command$ = "F50";
 	}
}

PUSH Auto_Focus
{
 	nAutoFocus = !nAutoFocus;
 	makestring(CommandToSend$,"D1%d",nAutoFocus);
 	Command$ = CommandToSend$;
}

PUSH Preset_1
{
 	Command$ = "R01";
}

PUSH Preset_2
{
 	Command$ = "R02";
}

PUSH Preset_3
{
 	Command$ = "R03";
}

PUSH Preset_4
{
 	Command$ = "R04";
}

PUSH Preset_5
{
 	Command$ = "R05";
}

PUSH Preset_1_Save
{
 	Command$ = "M01";
}

PUSH Preset_2_Save
{
 	Command$ = "M02";
}

PUSH Preset_3_Save
{
 	Command$ = "M03";
}

PUSH Preset_4_Save
{
 	Command$ = "M04";
}

PUSH Preset_5_Save
{
 	Command$ = "M05";
}

CHANGE PT_Speed
{
 	LONG_INTEGER lVelocity;
 	lVelocity = (PT_Speed * 49) / 65535;
 	nVelocity = LowWord(lVelocity);
 	IF(nVelocity > 49) nVelocity = 49;
 	IF(nVelocity < 1) nVelocity = 1;
 	PT_Speed_FB = PT_Speed;
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    WaitForInitializationComplete();
    Command$ = "UPVS999";

}


