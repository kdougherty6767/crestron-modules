/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:Aatel
System Name:
System Number:
Programmer:Kelseyd
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
   #SYMBOL_NAME "Standalone Beyer Speaker List"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
   DIGITAL_INPUT conferenceRunning, resetRTS, mustRequest[30], listPress[30];
   ANALOG_INPUT listState[30], listRTSCount[30]; 
   STRING_INPUT listName$[30][100];
// BUFFER_INPUT 

  
   STRING_OUTPUT toDCU$;
   ANALOG_OUTPUT listLengthOut;
   STRING_OUTPUT listNameOut$[30];
   ANALOG_OUTPUT listStateOut[30], listRTSCountOut[30];
   DIGITAL_OUTPUT resetBusy, speakerListToggle[30];

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
   INTEGER x, y, z, swapNum, swapID, swapRTSCount, lastState[30], listLength, swapHolderState, a, r, ctr, idx, internalListState[30], internalRTSCount[30], internalListID[30];
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
   STRING swapHolder$[100], internalList$[30][100];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/

/*
RELEASE input
{
    // TODO:  Add code here
}
*/


THREADSAFE CHANGE listState
{
	idx = getlastmodifiedarrayindex();
	
	if(mustRequest[idx] = 1 && conferenceRunning = 1 && resetBusy = off)
	{


		if(listState[idx] = 2 && listState[idx] <> lastState[idx] && lastState[idx] = 0)
		{
			print(" Entering IF statement 1\n");
    	 	internalList$[a+r+1] = listName$[idx];
			internalListState[a+r+1] = 2;
			internalListID[a+r+1] = idx;
			internalRTSCount[a+r+1] = listRTSCount[idx];
			r = r+1;
			listLength = a + r;
			listLengthOut = listLength;
			For(ctr = 1 to listLength)
			{
				listNameOut$[ctr] = internalList$[ctr];
				listStateOut[ctr] = internalListState[ctr];
				listRTSCountOut[ctr] = internalRTSCount[ctr];
			}
		}

		else if(listState[idx] = 1 && listState[idx] <> lastState[idx] && lastState[idx] = 2)
		{
			print(" Entering IF statement 2\n");
			r = r - 1;
			a = a + 1;
			listLength = a + r;
			listLengthOut = listLength;
			For(ctr = 1 to listLength)
			{
     			if(internalList$[ctr] = listName$[idx])
				{
       	   			swapHolder$ = internalList$[ctr];
					swapHolderState = 1;
					swapNum = ctr;
					swapID = internalListID[ctr];
					swapRTSCount = internalRTSCount[ctr];
					print("Found a match on pass - %u\nSwap Num = %u\n", ctr, swapNum);
				}
			}
		
			y = swapNum;
			x = 1;

			While(x = 1)
			{
				x = 0;				
     			if(internalListState[y-1] = 2)
				{
            	 	internalListState[y] = internalListState[y-1];
					internalList$[y] = internalList$[y-1];
					internalListID[y] = internalListID[y-1];
					internalRTSCount[y] = internalRTSCount[y-1];
					x = 1;
					y = y - 1;
				}	
			}
			
			y = 0;
	
			internalListState[a] = swapHolderState;
			internalList$[a] = swapHolder$;
			internalListID[a] = swapID;
			internalRTSCount[a] = swapRTSCount;
      	
			For(ctr = 1 to listLength)
			{
				listNameOut$[ctr] = internalList$[ctr];
				listStateOut[ctr] = internalListState[ctr];
				listRTSCountOut[ctr] = internalRTSCount[ctr];
			}
		}

		else if(listLength <> 0 && listState[idx] = 0 && listState[idx] <> lastState[idx])
		{
			x = 0;
			z = 0;
			do{
				x=x+1;
             	if(internalListID[x] = idx)
				{
					z = 1;
				}
				else z = 0;
			}until(z = 1 || x = listLength);

			if(z=1)
			{
				print(" Entering IF statement 3\n");
				if(lastState[idx] = 1)
				{
					a = a - 1;
				}
				else r = r -1;
	       		
				if(listLength > 0)
				{
					For(ctr = 1 to listLength+1)
					{
		     			if(internalList$[ctr] = listName$[idx])
						{
							makestring(swapHolder$, "");
							swapHolderState = 0;
							swapNum = ctr;
							swapID = internalListID[ctr];
							swapRTSCount = internalRTSCount[ctr];
						}
					}
					
					For(ctr = swapNum to listLength+1)
					{
		             	internalListState[ctr] = internalListState[ctr+1];
						internalList$[ctr] = internalList$[ctr+1];
						internalListID[ctr] = internalListID[ctr+1];
						internalRTSCount[ctr] = internalRTSCount[ctr+1];	
					}
		
					internalListState[listLength+1] = swapHolderState;
					internalList$[listLength+1] = swapHolder$;
					internalListID[listLength+1] = swapID;
					internalRTSCount[ListLength+1] = swapRTSCount;
				}			
		      	
				For(ctr = 1 to (listLength + 1))
				{
					
					listNameOut$[ctr] = internalList$[ctr];
					listStateOut[ctr] = internalListState[ctr];
					listRTSCountOut[ctr] = internalRTSCount[ctr];
				} 
				listLength = listLength - 1;
				listLengthOut = listLength;
			} 	
		}
		

	}
	
	
    if(conferenceRunning = on)
	{
		For(ctr = 1 to 30)
			{
       		  	lastState[ctr] = listState[ctr];
			}
	}
}

PUSH resetRTS
{
	resetBusy = on;
 	for(ctr = 1 to 30)
	{
		internalListState[ctr] = 0;
		lastState[ctr] = 0;
		listStateOut[ctr] = internalListState[ctr];
		makestring(internalList$[ctr], "");
		listNameOut$[ctr] = internalList$[ctr];
		internalRTSCount[ctr] = 0;
		listRTSCountOut[ctr] = internalRTSCount[ctr];
		internalListID[ctr] = 0;
	}
	a = 0;
	r = 0;
 	swapNum = 0;
	swapRTSCount = 0;
	swapID = 0;
	x = 0;
	y = 0;
	swapHolderState = 0;
	listLength = 0;
	listLengthOut = listLength;
	delay(200);
	resetBusy = off;
}

RELEASE conferenceRunning
{
	for(ctr = 1 to 30)
	{
		internalListState[ctr] = 0;
		lastState[ctr] = 0;
		listStateOut[ctr] = internalListState[ctr];
		makestring(internalList$[ctr], "");
		listNameOut$[ctr] = internalList$[ctr];
		internalRTSCount[ctr] = 0;
		listRTSCountOut[ctr] = internalRTSCount[ctr];
		internalListID[ctr] = 0;
	}
	a = 0;
	r = 0;
 	swapNum = 0;
	swapRTSCount = 0;
	swapID = 0;
	x = 0;
	y = 0;
	swapHolderState = 0;
	listLength = 0;
	listLengthOut = listLength; 	
}

PUSH listPress
{
	integer match;
 	idx = getlastmodifiedarrayindex();
	match = internalListID[idx];
	pulse(1, speakerListToggle[match]); 
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

        WaitForInitializationComplete();
		makestring(swapHolder$, "");
		swapHolderState = 0;
		r = 0;
		a = 0;
		setarray(lastState, 0);
 		
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}


