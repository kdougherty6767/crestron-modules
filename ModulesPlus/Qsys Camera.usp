#CATEGORY "46" "Qsys" // Custom
#SYMBOL_NAME "Qsys Camera"

#USER_SIMPLSHARP_LIBRARY "QscQsys"

#HELP_BEGIN
Iris Values:
0 = Close
1 = f/1.8
2 = f/2.0
3 = f/2.4
4 = f/2.8
5 = f/3.4
6 = f/4.0
7 = f/4.8
8 = f/5.6
9 = f/6.8
10 = f/8.0
11 = f/9.6
12 = f/11.0

Shutter Values:
0 = 1/30
1 = 1/60
2 = 1/90
3 = 1/100
4 = 1/125
5 = 1/180
6 = 1/250
7 = 1/350
8 = 1/500
9 = 1/725
10 = 1/1000
11 = 1/1500
12 = 1/2000
13 = 1/3000
14 = 1/4000
15 = 1/6000
16 = 1/10000   

Auto White Balance Mode Values:
0 = Auto
1 = Indoor/3000K
2 = Outdoor/5000K
3 = Manual
4 = One Push

Auto Wihite Balance Sensitivity Values:
0 = Low
1 = Mid
2 = High
#HELP_END

Digital_Input TiltUp, TiltDown, PanLeft, PanRight, _skip_, ZoomIn, ZoomOut, _skip_, AutoFocus, FocusNear, FocusFar, _skip_, RecallHome, SaveHome, _skip_, PrivacyOn, PrivacyOff, PrivacyToggle, _skip_, AutoFrameOn, AutoFrameOff, AutoFrameToggle;
Analog_Input _skip_, Brightness, Saturation, Sharpness, Contrast, _skip_, ExposureMode, Iris, Shutter;
analog_input Gain, _skip_, AutoWhiteBalanceMode, AutoWhiteBalanceSensitivity, WhiteBalanceHue, WhiteBalanceRedGain, WhiteBalanceBlueGain;
Digital_Output _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, AutoFocusIsOn, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, PrivacyIsOn,_skip_, _skip_, _skip_, AutoFrameIsOn;
analog_output _skip_, _skip_, _skip_, BrightnessValue, SaturationValue, SharpnessValue, ContrastValue;
string_output _skip_, ExposureModeValue, IrisValue, ShutterValue;
analog_output GainValue;
string_output _skip_, AutoWhiteBalnceModeValue, AutoWhiteBalanceSensitivityValue;
analog_output WhiteBalanceHueValue, WhiteBalanceRedGainValue, WhiteBalanceBlueGainValue;

String_Parameter _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, CoreID[100], ComponentName[100];

#BEGIN_PARAMETER_PROPERTIES CoreID
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "1";
#END_PARAMETER_PROPERTIES

QsysCamera camera;

Push TiltUp
{
    camera.TiltUp();
}
Release TiltUp
{
    camera.StopTiltUp();
}

Push TiltDown
{
    camera.TiltDown();
}
Release TiltDown
{
    camera.StopTiltDown();
}

Push PanLeft
{
    camera.PanLeft();
}
Release PanLeft
{
    camera.StopPanLeft();
}

Push PanRight
{
    camera.PanRight();
}
Release PanRight
{
    camera.StopPanRight();
}

Push ZoomIn
{
    camera.ZoomIn();
}

Release ZoomIn
{
    camera.StopZoomIn();
}

Push ZoomOut
{
    camera.ZoomOut();
}

push AutoFocus
{
    camera.AutoFocus();
}

push FocusNear
{
    camera.FocusNear();
}

release FocusNear
{
    camera.FocusNearStop();
}

push FocusFar
{
    camera.FocusFar();
}

release FocusFar
{
    camera.FocusFarStop();
}

Release ZoomOut
{
    camera.StopZoomOut();
}

Push RecallHome
{
    camera.RecallHome();
}

push SaveHome
{
    camera.SaveHome();
}

push PrivacyOn
{
    camera.PrivacyToggle(1);
}

push PrivacyOff
{
    camera.PrivacyToggle(0);
}

push PrivacyToggle
{
    camera.PrivacyToggle(!PrivacyIsOn);
}

push AutoFrameOn
{
    camera.AutoFrameToggle(1);
}

push AutoFrameOff
{
    camera.AutoFrameToggle(0);
}

push AutoFrameToggle
{
    camera.AutoFrameToggle(!AutoFrameIsOn);
}


threadsafe change Brightness
{
    integer x;

    if(Brightness = 0)
    {
        camera.Brightness(0);
    }
    else
    {
        while(x != Brightness)
        {
            x = Brightness;
            camera.Brightness(x);
        }
    }
}

threadsafe change Saturation
{
    integer x;

    if(Saturation = 0)
    {
        camera.Saturation(0);
    }
    else
    {
        while(x != Saturation)
        {
            x = Saturation;
            camera.Saturation(x);
        }
    }
}

threadsafe change Sharpness
{
    integer x;

    if(Sharpness = 0)
    {
        camera.Sharpness(0);
    }
    else
    {
        while(x != Sharpness)
        {
            x = Sharpness;
            camera.Sharpness(x);
        }
    }
}

threadsafe change Contrast
{
    integer x;

    if(Contrast = 0)
    {
        camera.Contrast(0);
    }
    else
    {
        while(x != Contrast)
        {
            x = Contrast;
            camera.Contrast(x);
        }
    }
}

threadsafe change ExposureMode
{
    if(ExposureMode = 0)
    {
        camera.ExposureMode("Auto");
    }
    else if(ExposureMode = 1)
    {
        camera.ExposureMode("Manual");
    }
}

threadsafe change Iris
{
    string state[255];

    switch(Iris)
    {
        case (0):
        {
            state = "Close";
        }
        case(1):
        {
            state = "f/1.8";
        }
        case(2):
        {
            state = "f/2.0";
        }
        case(3):
        {
            state = "f/2.4";
        }
        case(4):
        {
            state = "f/2.8";
        }
        case(5):
        {
            state = "f/3.4";
        }
        case(6):
        {
            state = "f/4.0";
        }
        case(7):
        {
            state = "f/4.8";
        }
        case(8):
        {
            state = "f/5.6";
        }
        case(9):
        {
            state = "f/6.8";
        }
        case(10):
        {
            state = "f/8.0";
        }
        case(11):
        {
            state = "f/9.6";
        }
        case(12):
        {
            state = "f/11.0";
        }
        default:
        {
            state = "";
        }
    }

    if(len(state))
    {
        camera.Iris(state);
    }
}

threadsafe change Shutter
{
    string state[255];

    switch(Shutter)
    {
        case (0):
        {
            state = "1/30";
        }
        case (1):
        {
            state = "1/60";
        }
        case (2):
        {
            state = "1/90";
        }
        case (3):
        {
            state = "1/100";
        }
        case (4):
        {
            state = "1/125";
        }
        case (5):
        {
            state = "1/180";
        }
        case (6):
        {
            state = "1/250";
        }
        case (7):
        {
            state = "1/350";
        }
        case (8):
        {
            state = "1/500";
        }
        case (9):
        {
            state = "1/725";
        }
        case (10):
        {
            state = "1/1000";
        }
        case (11):
        {
            state = "1/1500";
        }
        case (12):
        {
            state = "1/2000";
        }
        case (13):
        {
            state = "1/3000";
        }
        case (14):
        {
            state = "1/4000";
        }
        case (15):
        {
            state = "1/6000";
        }
        case (16):
        {
            state = "1/10000";
        }
        default:
        {
            state = "";
        }
    }

    if(len(state))
    {
        camera.Shutter(state);
    }
}

threadsafe change Gain
{
    integer x;

    if(Gain = 0)
    {
        camera.Gain(0);
    }
    else
    {
        while(x != Gain)
        {
            x = Gain;
            camera.Gain(x);
        }
    }
}

threadsafe change AutoWhiteBalanceMode
{
    string state[255];

    switch(AutoWhiteBalanceMode)
    {
        case (0):
        {
            state = "Auto";
        }
        case (1):
        {
            state = "Indoor/3000K";
        }
        case (2):
        {
            state = "Outdoor/5000K";
        }
        case (3):
        {
            state = "Manual";
        }
        case (4):
        {
            state = "One Push";
        }
        default:
        {
            state = "";
        }
    }

    if(len(state))
    {
        camera.AutoWhiteBalanceMode(state);
    }
}

threadsafe change AutoWhiteBalanceSensitivity
{
    string state[255];

    switch(AutoWhiteBalanceSensitivity)
    {
        case (0):
        {
            state = "Low";
        }
        case (1):
        {
            state = "Mid";
        }
        case (2):
        {
            state = "High";
        }
        default:
        {
            state = "";
        }
    }

    if(len(state))
    {
        camera.AutoWhiteBalanceSensitivity(state);
    }
}

threadsafe change WhiteBalanceHue
{
    integer x;

    if(WhiteBalanceHue = 0)
    {
        camera.Hue(0);
    }
    else
    {
        while(x != WhiteBalanceHue)
        {
            x = WhiteBalanceHue;
            camera.Hue(x);
        }
    }
}

threadsafe change WhiteBalanceRedGain
{
    integer x;

    if(WhiteBalanceRedGain = 0)
    {
        camera.RedGain(0);
    }
    else
    {
        while(x != WhiteBalanceRedGain)
        {
            x = WhiteBalanceRedGain;
            camera.RedGain(x);
        }
    }
}

threadsafe change WhiteBalanceBlueGain
{
    integer x;

    if(WhiteBalanceBlueGain = 0)
    {
        camera.BlueGain(0);
    }
    else
    {
        while(x != WhiteBalanceBlueGain)
        {
            x = WhiteBalanceBlueGain;
            camera.BlueGain(x);
        }
    }
}

callback function NewPrivacyChange(string cName, integer val)
{
    PrivacyIsOn = val;
}

callback function NewBrightnessChange(string cName, integer val)
{
    BrightnessValue = val;
}

callback function NewSaturationChange(string cName, integer val)
{
    SaturationValue = val;
}

callback function NewSharpnessChange(string cName, integer val)
{
    SharpnessValue = val;
}

callback function NewContrastChange(string cName, integer val)
{
    ContrastValue = val;
}

callback function NewExposureModeChange(string cName, string val)
{
    ExposureModeValue = val;
}

callback function NewIrisChange(string cName, string val)
{
    IrisValue = val;
}

callback function NewShutterChange(string cName, string val)
{
    ShutterValue = val;
}

callback function NewGainChange(string cName, integer val)
{
    GainValue = val;
}

callback function NewAwbModeChange(string cName, string val)
{
    AutoWhiteBalnceModeValue = val;
}

callback function NewAwbSensitivityChange(string cName, string val)
{
    AutoWhiteBalanceSensitivityValue = val;
}

callback function NewWbHueChange(string cName, integer val)
{
    WhiteBalanceHueValue = val;
}

callback function NewWbRedGainChange(string cName, integer val)
{
    WhiteBalanceRedGainValue = val;
}

callback function NewWbBlueGainChange(string cName, integer val)
{
    WhiteBalanceBlueGainValue = val;
}

callback function NewAutoFocusChange(string cName, integer val)
{
    AutoFocusIsOn = val;
}

callback function NewAutoFrameChange(string cName, integer val)
{
    AutoFrameIsOn = val;
}


Function Main()
{
    RegisterDelegate(camera, onPrivacyChange, NewPrivacyChange);
    RegisterDelegate(camera, onBrightnessChange, NewBrightnessChange);
    RegisterDelegate(camera, onSaturationChange, NewSaturationChange);
    RegisterDelegate(camera, onSharpnessChange, NewSharpnessChange);
    RegisterDelegate(camera, onContrastChange, NewContrastChange);
    RegisterDelegate(camera, onExposureModeChange, NewExposureModeChange);
    RegisterDelegate(camera, onIrisChange, NewIrisChange);
    RegisterDelegate(camera, onShutterChange, NewShutterChange);
    RegisterDelegate(camera, onGainChange, NewGainChange);
    RegisterDelegate(camera, onAutoWhiteBalanceSensitivityChange, NewAwbSensitivityChange);
    RegisterDelegate(camera, onAutoWhiteBalanceModeChange, NewAwbModeChange);
    RegisterDelegate(camera, onWhiteBalanceHueChange, NewWbHueChange);
    RegisterDelegate(camera, onWhiteBalanceRedGainChange, NewWbRedGainChange);
    RegisterDelegate(camera, onWhiteBalanceBlueGainChange, NewWbBlueGainChange);
    RegisterDelegate(camera, onAutoFocusChange, NewAutoFocusChange);
    RegisterDelegate(camera, onAutoFrameChange, NewAutoFrameChange);

    camera.Initialize(CoreID, ComponentName);
}
