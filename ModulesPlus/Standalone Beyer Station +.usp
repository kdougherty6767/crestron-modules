/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:Aatel
System Name:
System Number:
Programmer:Kelseyd
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
   #SYMBOL_NAME "Standalone Beyer Station +"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
   DIGITAL_INPUT conferenceRunning, requestStation, micOn, micRTS, micOff, micToggle; 
// ANALOG_INPUT 
   STRING_INPUT stationNameEdit$[100], fromMainModule$[100];
// BUFFER_INPUT 

   DIGITAL_OUTPUT btnYes, btnNo, btnAbs, btnSpare, requestStationFb; 
   ANALOG_OUTPUT stationState, stationCount;
   STRING_OUTPUT stationName$, toDCU$;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
   INTEGER_PARAMETER _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, logID;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
   NONVOLATILE INTEGER rtsState[11];
   INTEGER ctr, currentConf, sState, sCount;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
   STRING temp$[100];
   NONVOLATILE STRING cName$[11][100], sName$[11][100]; 


/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/

/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE fromMainModule$
{
	temp$ = fromMainModule$;
	if(byte(temp$, 2) = 0x6A && conferenceRunning = on)
	{
     	switch(byte(temp$, 7))
		{
         	case(0x01):
			{
            	if(rtsState[currentConf] = on)
				{
                 	if(sState = 0)
					{
                     	sState = 2;
					}
					else
					{
						sState = 0;
						makestring(toDCU$, "\x06\x0A%s\x00\x02\x00\x01", chr(logID));
					}                   

				}
				if(rtsState[currentConf] = off)
				{
                 	if(sState = 0)
					{
                     	sState = 1;
						makestring(toDCU$, "\x06\x0A%s\x00\x01\x00\x01", chr(logID));
					}
					else
					{
						sState = 0;
						makestring(toDCU$, "\x06\x0A%s\x00\x02\x00\x01", chr(logID));
					}                   

				}
				stationState = sState;
			}
			case(0x02):
			{
                pulse(1, btnYes);
			}
			case(0x03):
			{
                pulse(1, btnNo);
			}
			case(0x04):
			{
                pulse(1, btnAbs);
			}
			case(0x05):
			{
                pulse(1, btnSpare);
			}
		
			default: clearbuffer(temp$);
		}
	
	}

	else if(byte(temp$, 2) = 0x6A && conferenceRunning = off)
	{
     	sState = 0;
		makestring(toDCU$, "\x06\x0A%s\x00\x02\x00\x01", chr(logID));
		stationState = sState;
	}
	
	else if(byte(temp$, 2) = 0x44)
	{
     	switch(byte(temp$, 1))
		{
         	case(0x01):
			{
             	cName$[byte(temp$, 3)] = mid(temp$, 4, (len(temp$) - 3));
			}
			case(0x02):
			{
             	currentConf = byte(temp$, 3);
				stationName$ = sName$[currentConf];
				requestStationFb = rtsState[currentConf];
				print("Current Conference index is - %u", currentConf);
			}
			case(0x03):
			{
				delay(50);
     			sCount = 0;
				stationCount = sCount;
				sState = 0;
				stationState = sState;
			}
			case(0x04):	
			{
            	sState = 0;
				makestring(toDCU$, "\x06\x0A%s\x00\x02\x00\x01", chr(logID));
				stationState = sState; 	
			}		
		
			default: clearbuffer(temp$);
		}
	} 
	   
}

PUSH micToggle
{ 
 	if(sState = 0 || sState = 2)
	{
		sState = 1;
		makestring(toDCU$, "\x06\x0A%s\x00\x01\x00\x01", chr(logID));
		sCount = sCount+1;
	}
	else 
	{
     	sState = 0;
		makestring(toDCU$, "\x06\x0A%s\x00\x02\x00\x01", chr(logID));
	}
	stationState = sState;
	stationCount = sCount;
}


PUSH conferenceRunning
{
	delay(100);
 	requestStationFb = rtsState[currentConf];
	stationName$ = sName$[currentConf];
}

RELEASE conferenceRunning
{
 	sState = 0;
	stationState = sState;
	sCount = 0;
	stationCount = sCount;
}

PUSH requestStation
{
 	if(rtsState[currentConf] = off)
	{
     	rtsState[currentConf] = on;	
	}
	else rtsState[currentConf] = off;
	
	requestStationFb = rtsState[currentConf];
}

CHANGE stationNameEdit$
{
 	sName$[currentConf] = stationNameEdit$;
	stationName$ = sName$[currentConf];
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

   		 WaitForInitializationComplete();
	
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}


