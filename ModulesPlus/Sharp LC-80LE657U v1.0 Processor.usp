/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Crestron Electronics, Inc.
System Name:
System Number:
Programmer: LP
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
#HINT "Sharp LC-80LE657U v1.0 Processor"

#DEFINE_CONSTANT	ciClear			0
#DEFINE_CONSTANT	ciPower			1
#DEFINE_CONSTANT	ciRS232			2
#DEFINE_CONSTANT	ciInput			3
#DEFINE_CONSTANT	ciTV			4
#DEFINE_CONSTANT	ciAVMode		5
#DEFINE_CONSTANT	ciAspect		6
#DEFINE_CONSTANT	ciMute			7
#DEFINE_CONSTANT	ciVolume		8
#DEFINE_CONSTANT	ciChannel		9
#DEFINE_CONSTANT	ciThreeDMode	10

#DEFINE_CONSTANT	ciPollIndexMax 11
#DEFINE_CONSTANT	csDelimeter "\x0D"

// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
// #ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
To be used with the Sharp LC-80LE657U v1.0.umc module only.
Not to be used as a stand-alone module.
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Poll_Request;

ANALOG_INPUT Power_Request;
ANALOG_INPUT Input_Request;
ANALOG_INPUT TV_Request;
ANALOG_INPUT AV_Mode_Request;
ANALOG_INPUT Aspect_Request;
ANALOG_INPUT ThreeD_Mode_Request;
ANALOG_INPUT Mute_Request;

ANALOG_INPUT Power_Current;
ANALOG_INPUT Input_Current;
ANALOG_INPUT TV_Current;
ANALOG_INPUT AV_Mode_Current;
ANALOG_INPUT Aspect_Current;
ANALOG_INPUT ThreeD_Current;
ANALOG_INPUT Mute_Current;
DIGITAL_INPUT Digital_Tuning;

DIGITAL_INPUT Audio_Mode;
DIGITAL_INPUT Surround_Mode;
DIGITAL_INPUT Closed_Caption;
DIGITAL_INPUT Channel_Up;
DIGITAL_INPUT Channel_Down;

DIGITAL_INPUT From_Device_Push;

DIGITAL_INPUT Air, Cable, KP[13];
DIGITAL_INPUT Volume[2];
DIGITAL_INPUT IR_Keys[54];
				
BUFFER_INPUT From_Device[500];

DIGITAL_OUTPUT Wait_Pulse;
DIGITAL_OUTPUT Power_On_Wait_Pulse;

ANALOG_OUTPUT Poll_Request_Send;

ANALOG_OUTPUT Power_Request_Send;
ANALOG_OUTPUT Input_Request_Send;
ANALOG_OUTPUT TV_Request_Send;
ANALOG_OUTPUT AV_Mode_Request_Send;
ANALOG_OUTPUT Aspect_Request_Send;
ANALOG_OUTPUT ThreeD_Mode_Request_Send;
ANALOG_OUTPUT Mute_Request_Send;

DIGITAL_OUTPUT Command_Sent_Pulse;
DIGITAL_OUTPUT Channel_Request_Pulse;

ANALOG_OUTPUT Power_Value;
ANALOG_OUTPUT Input_Value;
ANALOG_OUTPUT TV_Value;
ANALOG_OUTPUT AV_Mode_Value;
ANALOG_OUTPUT Aspect_Value;
ANALOG_OUTPUT ThreeD_Mode_Value;
ANALOG_OUTPUT Mute_Value;
ANALOG_OUTPUT Volume_Value;
ANALOG_OUTPUT Channel_Value;
STRING_OUTPUT Channel_Text;
STRING_OUTPUT Number_Text;
ANALOG_OUTPUT RS232_Power_Value;

STRING_OUTPUT To_Device;

 

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER iPowerRequest, iPowerCurrent;
INTEGER iInputRequest, iInputCurrent;
INTEGER iTVRequest, iTVCurrent;
INTEGER iAVModeRequest, iAVModeCurrent;
INTEGER iAspectRequest, iAspectCurrent;
INTEGER iThreeDModeRequest, iThreeDModeCurrent;
INTEGER iMuteRequest, iMuteCurrent;
INTEGER iVolumeRequest, iVolumeCurrent, iVolumeOut;
INTEGER iChannelRequest, iChannelCurrent;
INTEGER iAudioModeRequest;

INTEGER iSurroundModeRequest;

INTEGER iClosedCaptionRequest;

INTEGER iChannelUpRequest;

INTEGER iChannelDownRequest;

INTEGER iIRKeysRequest, iIRKeysOut;

INTEGER iPollIndex;
INTEGER iWaitingForStatus;
INTEGER iAttempts;
INTEGER iStatusValue;
INTEGER iVolumeSpeed;

STRING sNumber[10], sChannelF[9], sChannelR[9], sChannelTemp[30];
STRING sCurrentChannel[10];
INTEGER iSplit;
INTEGER iRS232Request, iRS232Current;
INTEGER iCurrentCommand;

INTEGER iPowerRetry;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

String_Function SendIRKeys(INTEGER iValue)	// not used in this module, but available if needed in the future
{

	STRING sToDeviceTemp[10];
	switch(iValue)
	{
		case(1):
			sToDeviceTemp = "RCKY00  \x0D";	
		case(2):
			sToDeviceTemp = "RCKY01  \x0D";	
		case(3):
			sToDeviceTemp = "RCKY02  \x0D";	
		case(4):
			sToDeviceTemp = "RCKY03  \x0D";	
		case(5):
			sToDeviceTemp = "RCKY04  \x0D";	
		case(6):
			sToDeviceTemp = "RCKY05  \x0D";	
		case(7):
			sToDeviceTemp = "RCKY06  \x0D";	
		case(8):
			sToDeviceTemp = "RCKY07  \x0D";	
		case(9):
			sToDeviceTemp = "RCKY08  \x0D";	
		case(10):
			sToDeviceTemp = "RCKY09  \x0D";	
		case(11):
			sToDeviceTemp = "RCKY10  \x0D";	
		case(12):
			sToDeviceTemp = "RCKY11  \x0D";	
		case(13):
			sToDeviceTemp = "RCKY12  \x0D";	
		case(14):
			sToDeviceTemp = "RCKY13  \x0D";	
		case(15):
			sToDeviceTemp = "RCKY14  \x0D";	
		case(16):
			sToDeviceTemp = "RCKY15  \x0D";	
		case(17):
			sToDeviceTemp = "RCKY16  \x0D";	
		case(18):
			sToDeviceTemp = "RCKY17  \x0D";	
		case(19):
			sToDeviceTemp = "RCKY18  \x0D";	
		case(20):
			sToDeviceTemp = "RCKY19  \x0D";	
		case(21):
			sToDeviceTemp = "RCKY20  \x0D";	
		case(22):
			sToDeviceTemp = "RCKY21  \x0D";	
		case(23):
			sToDeviceTemp = "RCKY22  \x0D";	
		case(24):
			sToDeviceTemp = "RCKY23  \x0D";	
		case(25):
			sToDeviceTemp = "RCKY24  \x0D";	
		case(26):
			sToDeviceTemp = "RCKY27  \x0D";	
		case(27):
			sToDeviceTemp = "RCKY28  \x0D";	
		case(28):
			sToDeviceTemp = "RCKY29  \x0D";	
		case(29):
			sToDeviceTemp = "RCKY30  \x0D";	
		case(30):
			sToDeviceTemp = "RCKY34  \x0D";	
		case(31):
			sToDeviceTemp = "RCKY35  \x0D";	
		case(32):
			sToDeviceTemp = "RCKY36  \x0D";	
		case(33):
			sToDeviceTemp = "RCKY38  \x0D";	
		case(34):
			sToDeviceTemp = "RCKY39  \x0D";	
		case(35):
			sToDeviceTemp = "RCKY40  \x0D";	
		case(36):
			sToDeviceTemp = "RCKY41  \x0D";	
		case(37):
			sToDeviceTemp = "RCKY42  \x0D";	
		case(38):
			sToDeviceTemp = "RCKY43  \x0D";	
		case(39):
			sToDeviceTemp = "RCKY44  \x0D";	
		case(40):
			sToDeviceTemp = "RCKY45  \x0D";	
		case(41):
			sToDeviceTemp = "RCKY46  \x0D";	
		case(42):
			sToDeviceTemp = "RCKY47  \x0D";	
		case(43):
			sToDeviceTemp = "RCKY48  \x0D";	
		case(44):
			sToDeviceTemp = "RCKY49  \x0D";	
		case(45):
			sToDeviceTemp = "RCKY50  \x0D";	
		case(46):
			sToDeviceTemp = "RCKY51  \x0D";	
		case(47):
			sToDeviceTemp = "RCKY52  \x0D";	
		case(48):
			sToDeviceTemp = "RCKY53  \x0D";	
		case(49):
			sToDeviceTemp = "RCKY54  \x0D";	
		case(50):
			sToDeviceTemp = "RCKY55  \x0D";	
		case(51):
			sToDeviceTemp = "RCKY56  \x0D";	
		case(52):
			sToDeviceTemp = "RCKY57  \x0D";	
		case(53):
			sToDeviceTemp = "RCKY58  \x0D";	
		case(54):
			sToDeviceTemp = "RCKY59  \x0D";	
	}
	Return (sToDeviceTemp);
}

Function SendNextCommand()
{
	if(iPowerRequest)
	{
		iCurrentCommand = ciPower;
		Power_Request_Send = 65535;
		Power_Request_Send = iPowerRequest;
		Command_Sent_Pulse = 1; Command_Sent_Pulse = 0;
	}
	else if(iInputRequest)
	{	
		iCurrentCommand = ciInput;
		Input_Request_Send = 65535;
		Input_Request_Send = iInputRequest;
		Command_Sent_Pulse = 1; Command_Sent_Pulse = 0;
	}
	else if(iTVRequest)
	{	
		iCurrentCommand = ciTV;
		TV_Request_Send = 65535;
		TV_Request_Send = iTVRequest;
		Command_Sent_Pulse = 1; Command_Sent_Pulse = 0;
	}
	else if(iAVModeRequest)
	{	
		iCurrentCommand = ciAVMode;
		AV_Mode_Request_Send = 65535;
		AV_Mode_Request_Send = iAVModeRequest;
		Command_Sent_Pulse = 1; Command_Sent_Pulse = 0;
	}
	else if(iAspectRequest)
	{	
		iCurrentCommand = ciAspect;
		Aspect_Request_Send = 65535;
		Aspect_Request_Send = iAspectRequest;
		Command_Sent_Pulse = 1; Command_Sent_Pulse = 0;
	}
    else if(iThreeDModeRequest)
	{	
		iCurrentCommand = ciThreeDMode;
		ThreeD_Mode_Request_Send = 65535;
		ThreeD_Mode_Request_Send = iThreeDModeRequest;
		Command_Sent_Pulse = 1; Command_Sent_Pulse = 0;
	}
	else if(iMuteRequest)
	{	
		iCurrentCommand = ciMute;
		Mute_Request_Send = 65535;
		Mute_Request_Send = iMuteRequest;
		Command_Sent_Pulse = 1; Command_Sent_Pulse = 0;
	}
	else if(iVolumeRequest)
	{	
		iCurrentCommand = ciVolume;
		if(iVolumeOut < 2)
			makestring(To_Device, "VOLM%d\x20\x20\x20\r", iVolumeOut);
		else if(iVolumeOut = 100)
			makestring(To_Device, "VOLM%d\x20\r", iVolumeOut);
		else
			makestring(To_Device, "VOLM%d\x20\x20\r", iVolumeOut);
		Command_Sent_Pulse = 1; Command_Sent_Pulse = 0;
	}
	else if(iChannelRequest)
	{	
		iCurrentCommand = ciChannel;
		if(iSplit)
		{
			makestring(To_Device, "DC2U%s \r", sChannelF);
			delay(50);
			makestring(To_Device, "DC2L%s \r", sChannelR);
		}
        else
			makestring(To_Device, "%s", sChannelTemp);
		iChannelRequest = ciClear;
		Command_Sent_Pulse = 1; Command_Sent_Pulse = 0;
	}
	else if(iAudioModeRequest)		
	{	To_Device = "ACHA1   \x0D"; iAudioModeRequest = ciClear;
		Command_Sent_Pulse = 1; Command_Sent_Pulse = 0;
	}
	else if(iSurroundModeRequest)		
	{	To_Device = "ACSU0   \x0D"; iSurroundModeRequest = ciClear;
		Command_Sent_Pulse = 1; Command_Sent_Pulse = 0;
	}
	else if(iClosedCaptionRequest)		
	{	To_Device = "CLCP1   \x0D"; iClosedCaptionRequest = ciClear;
		Command_Sent_Pulse = 1; Command_Sent_Pulse = 0;
	}
	else if(iChannelUpRequest)		
	{	To_Device = "CHUP1   \x0D"; iChannelUpRequest = ciClear;
		Command_Sent_Pulse = 1; Command_Sent_Pulse = 0;
	}
	else if(iChannelDownRequest)		
	{	To_Device = "CHDW1   \x0D"; iChannelDownRequest = ciClear;
		Command_Sent_Pulse = 1; Command_Sent_Pulse = 0;
	}
	else if(iIRKeysRequest)		
	{	To_Device = SendIRKeys(iIRKeysOut); iIRKeysRequest = ciClear;
		Command_Sent_Pulse = 1; Command_Sent_Pulse = 0;
	}
    else if(iRS232Request)
	{	To_Device = "RSPW1   \x0D"; iRS232Request = ciClear;
		Command_Sent_Pulse = 1; Command_Sent_Pulse = 0;
	}
	else
	{
		iWaitingForStatus = 0;
		iCurrentCommand = ciClear;
	}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

CHANGE Power_Request
{
	iAttempts = 0;
	iPowerRequest = Power_Request;
	if(iPowerRequest = iPowerCurrent)
		iPowerRequest = ciClear;
	else if(iWaitingForStatus = 0)
	{
		iWaitingForStatus = 1;
		SendNextCommand();
	}
}

CHANGE Input_Request
{
	iAttempts = 0;
	iTVRequest = ciClear;
	iInputRequest = Input_Request;
	if(iInputRequest = iInputCurrent)
		iInputRequest = ciClear;
	else if(iWaitingForStatus = 0)
	{
		iWaitingForStatus = 1;
		SendNextCommand();
	}
}

CHANGE TV_Request
{
	iAttempts = 0;
	iInputRequest = ciClear;
	iTVRequest = TV_Request;
	if(iTVRequest = iTVCurrent)
		iTVRequest = ciClear;
	else if(iWaitingForStatus = 0)
	{
		iWaitingForStatus = 1;
		SendNextCommand();
	}
}

CHANGE AV_Mode_Request
{
	iAttempts = 0;
	iAVModeRequest = AV_Mode_Request;
	if(iAVModeRequest = iAVModeCurrent)
		iAVModeRequest = ciClear;
	else if(iWaitingForStatus = 0)
	{
		iWaitingForStatus = 1;
		SendNextCommand();
	}
}

CHANGE Aspect_Request
{
	iAttempts = 0;
	iAspectRequest = Aspect_Request;
	if(iAspectRequest = iAspectCurrent)
		iAspectRequest = ciClear;
	else if(iWaitingForStatus = 0)
	{
		iWaitingForStatus = 1;
		SendNextCommand();
	}
}

CHANGE ThreeD_Mode_Request
{
	iAttempts = 0;
	iThreeDModeRequest = ThreeD_Mode_Request;
	if(iThreeDModeRequest = iThreeDModeCurrent)
		iThreeDModeRequest = ciClear;
	else if(iWaitingForStatus = 0)
	{
		iWaitingForStatus = 1;
		SendNextCommand();
	}
}

CHANGE Mute_Request
{
	iAttempts = 0;
	iMuteRequest = Mute_Request;
	if(iMuteRequest = iMuteCurrent)
		iMuteRequest = ciClear;
	else if(iWaitingForStatus = 0)
	{
		iWaitingForStatus = 1;
		SendNextCommand();
	}
}

PUSH Audio_Mode
{
	iAudioModeRequest = 1;
	if(iWaitingForStatus = 0)
	{
		iWaitingForStatus = 1;
		SendNextCommand();
	}
}

PUSH Surround_Mode
{
	iSurroundModeRequest = 1;
	if(iWaitingForStatus = 0)
	{
		iWaitingForStatus = 1;
		SendNextCommand();
	}
}

PUSH Closed_Caption
{
	iClosedCaptionRequest = 1;
	if(iWaitingForStatus = 0)
	{
		iWaitingForStatus = 1;
		SendNextCommand();
	}
}

PUSH Channel_Up
{
	iChannelUpRequest = 1;
	if(iWaitingForStatus = 0)
	{
		iWaitingForStatus = 1;
		SendNextCommand();
	}
}

PUSH Channel_Down
{
	iChannelDownRequest = 1;
	if(iWaitingForStatus = 0)
	{
		iWaitingForStatus = 1;
		SendNextCommand();
	}
}

PUSH IR_Keys
{
	iIRKeysOut = getlastmodifiedarrayindex();
	iIRKeysRequest = 1;
	if(iWaitingForStatus = 0)
	{
		iWaitingForStatus = 1;
		SendNextCommand();
	}
}



PUSH Volume
{
	wait(300, VolumeSpeed)		// increase volume inc/dec to 10 after 3s
	{
		iVolumeSpeed = 1;
	}	
	while(Volume[getlastmodifiedarrayindex()])
	{
		if(getlastmodifiedarrayindex() = 1 && iVolumeCurrent < 100)
		{
			if(iVolumeSpeed = 1 && iVolumeCurrent > 90)
				iVolumeOut = 100;
			else if(iVolumeSpeed = 1)
				iVolumeOut = iVolumeCurrent + 10;
			else
				iVolumeOut = iVolumeCurrent + 1;
			iVolumeRequest = 1;
		}
		else if(getlastmodifiedarrayindex() = 2 && iVolumeCurrent > 0)
		{
			if(iVolumeSpeed = 1 && iVolumeCurrent < 10)
				iVolumeOut = 0;
			else if(iVolumeSpeed = 1)
				iVolumeOut = iVolumeCurrent - 10;
			else
				iVolumeOut = iVolumeCurrent - 1;
			iVolumeRequest = 1;
		}
		if(iWaitingForStatus = 0)
		{
			iWaitingForStatus = 1;
			SendNextCommand();
		}
	}
}

RELEASE Volume
{
	cancelwait(VolumeSpeed);
	iVolumeSpeed = 0;
}


CHANGE Power_Current	// Command 1
{
	iPowerCurrent = Power_Current;
	if(iPowerCurrent = iPowerRequest)
	{
		iPowerRequest = ciClear;
	}
	else if(iPowerCurrent <> iPowerRequest && iPowerRequest <> ciClear)
	{
		if(iAttempts < 2)
		{
			iAttempts = iAttempts + 1;
		}
		else
		{
			iAttempts = 0;
			iPowerRequest = ciClear;
			iPowerRetry = 0;
		}
	}
}

CHANGE Input_Current	// Command 2
{
	iInputCurrent = Input_Current;
	iTVCurrent = 0;
	if(iInputCurrent = iInputRequest)
	{
		iInputRequest = ciClear;
	}
	else if(iInputCurrent <> iInputRequest && iInputRequest <> ciClear)
	{
		if(iAttempts < 2)
		{
			iAttempts = iAttempts + 1;
		}
		else
		{
			iAttempts = 0;
			iInputRequest = ciClear;
		} 
	}
}

CHANGE TV_Current	// Command 3
{
	iTVCurrent = TV_Current;
	if(iTVCurrent = 1)
		iInputCurrent = 0;
	if(iTVCurrent = iTVRequest)
	{
		iTVRequest = ciClear;
	}
	else if(iTVCurrent <> iTVRequest && iTVRequest <> ciClear)
	{
		if(iAttempts < 2)
		{
			iAttempts = iAttempts + 1;
		}
		else
		{
			iAttempts = 0;
			iTVRequest = ciClear;
		} 
	}
}

CHANGE AV_Mode_Current	// Command 4
{
	iAVModeCurrent = AV_Mode_Current;
	if(iAVModeCurrent = iAVModeRequest)
	{
		iAVModeRequest = ciClear;
	}
	else if(iAVModeCurrent <> iAVModeRequest && iAVModeRequest <> ciClear)
	{
		if(iAttempts < 2)
		{
			iAttempts = iAttempts + 1;
		}
		else
		{
			iAttempts = 0;
			iAVModeRequest = ciClear;
		} 
	}
}

CHANGE Aspect_Current	// Command 5
{
	iAspectCurrent = Aspect_Current;
	if(iAspectCurrent = iAspectRequest)
	{
		iAspectRequest = ciClear;
	}
	else if(iAspectCurrent <> iAspectRequest && iAspectRequest <> ciClear)
	{
		if(iAttempts < 2)
		{
			iAttempts = iAttempts + 1;
		}
		else
		{
			iAttempts = 0;
			iAspectRequest = ciClear;
		} 
	}
}

CHANGE Mute_Current	// Command 6
{
	iMuteCurrent = Mute_Current;
	if(iMuteCurrent = iMuteRequest)
	{
		iMuteRequest = ciClear;
	}
	else if(iMuteCurrent <> iMuteRequest && iMuteRequest <> ciClear)
	{
		if(iAttempts < 2)
		{
			iAttempts = iAttempts + 1;
		}
		else
		{
			iAttempts = 0;
			iMuteRequest = ciClear;
		} 
	}
}
 
CHANGE ThreeD_Current	// Command 7
{
	iThreeDModeCurrent = ThreeD_Current;
	if(iThreeDModeCurrent = iThreeDModeRequest)
	{
		iThreeDModeRequest = ciClear;
	}
	else if(iThreeDModeCurrent <> iThreeDModeRequest && iThreeDModeRequest <> ciClear)
	{
		if(iAttempts < 2)
		{
			iAttempts = iAttempts + 1;
		}
		else
		{
			iAttempts = 0;
			iThreeDModeRequest = ciClear;
		} 
	}
}

PUSH Poll_Request
{
	iWaitingForStatus = 1;
	if(iPowerCurrent = 2)	// if power is off
	{
		Poll_Request_Send = 1;	// poll for power only
		Poll_Request_Send = 0;
		iCurrentCommand = ciPower;
	}
	else
	{
		if(iPollIndex < ciPollIndexMax)
			iPollIndex = iPollIndex + 1;	
		else
			iPollIndex = 1;
		Poll_Request_Send = iPollIndex;
		Poll_Request_Send = 0;
		iCurrentCommand = iPollIndex;
	}
}

THREADSAFE PUSH From_Device_Push
{
	STRING sResponse[500];
	STRING sValue[10];
	INTEGER a;

	while(find(csDelimeter, From_Device))
	{
		sResponse = remove(csDelimeter, From_Device);
		if(find("OK", sResponse))
		{
			if(iCurrentCommand = ciPower)	// power command sent last
			{
				if(iPowerRequest = 1)	// if OK received after power on command sent
				{
					Power_Value = 65535;	
					Power_Value = 1;			// immediately set power status to on.
					Power_On_Wait_Pulse = 1;	// wait 45s before sending any other commands/polls
					Power_On_Wait_Pulse = 0;
					iPollIndex = 0;				// set to 0 so first poll will be TV power
				}
				else					// if OK received after power off command sent
				{
					Power_Value = 65535;		// immediately set power status to off.
					Power_Value = 0;
	
					iInputRequest = 0;			// clear other command requests.
					iTVRequest = 0;
					iAVModeRequest = 0;
					iAspectRequest = 0;
					iThreeDModeRequest = 0;
					iMuteRequest = 0;
					iVolumeRequest = 0;
					iChannelRequest = 0;
					iAudioModeRequest = 0;
				}
			}
			else								// send poll for last command sent
			{
				if(iCurrentCommand = ciInput)
				{	delay(50); Poll_Request_Send = ciInput;}	
				else if(iCurrentCommand = ciTV)
				{	delay(50); Poll_Request_Send = ciTV;}
				else if(iCurrentCommand = ciAVMode)
				{	delay(50); Poll_Request_Send = ciAVMode;}
				else if(iCurrentCommand = ciAspect)
				{	delay(50); Poll_Request_Send = ciAspect;}
                else if(iCurrentCommand = ciThreeDMode)
				{	delay(50); Poll_Request_Send = ciThreeDMode;}	
				else if(iCurrentCommand = ciMute)
				{	delay(50); Poll_Request_Send = ciMute;}
				else if(iCurrentCommand = ciVolume)
					Poll_Request_Send = ciVolume;
				else if(iCurrentCommand = ciChannel)
				{	delay(50); Poll_Request_Send = ciChannel;}
				else if(iCurrentCommand = ciRS232)
					Poll_Request_Send = ciRS232;
				else							
				{
					iWaitingForStatus = 1;
					delay(50);
					SendNextCommand();
        		}
			}
			Poll_Request_Send = 0;
		}
		else if(find("ERR", sResponse))		// if error received, clear request (except for power)
		{
			if(iCurrentCommand = ciPower)	// If RS232 is enabled
			{
				iPowerRetry = iPowerRetry + 1;
				if(iPowerRetry > 9)
				{
					iPowerRequest = ciClear;
					iPowerRetry = 0;
				}
			}
			else if(iCurrentCommand = ciInput)
				iInputRequest = ciClear;
			else if(iCurrentCommand = ciTV)
				iTVRequest = ciClear;
			else if(iCurrentCommand = ciAVMode)
				iAVModeRequest = ciClear;
			else if(iCurrentCommand = ciAspect)
				iAspectRequest = ciClear;
			else if(iCurrentCommand = ciThreeDMode)
				iThreeDModeRequest = ciClear;
			else if(iCurrentCommand = ciMute)
				iMuteRequest = ciClear;
			else if(iCurrentCommand = ciVolume)
				iVolumeRequest = ciClear;
			else if(iCurrentCommand = ciChannel)
				iChannelRequest = ciClear;
			else if(iCurrentCommand = ciRS232)
			{
				iRS232Current = 0;
				RS232_Power_Value = iRS232Current;
			}
			iCurrentCommand = ciClear;
			iWaitingForStatus = 1;
			delay(50);
			SendNextCommand();
		}
		else if(find("WAIT", sResponse))	// if wait received, don't send commands for 15s
		{
			Wait_Pulse = 1;
			Wait_Pulse = 0;
		}
		else								// parse out value text
		{
			sResponse = left(sResponse, len(sResponse) - len(csDelimeter));
			clearbuffer(sValue);
			if(len(sResponse) > 4)
			{
				for(a = len(sResponse) to (len(sResponse) - 4) - 1)
				{
					if(byte(sResponse, a) >= 0x30 && byte(sResponse, a) <= 0x39)
						sValue = mid(sResponse, a, 1) + sValue;
					else
						break;
				}
			}
			else
				sValue = sResponse;
			if(len(sValue))					// if value text exists
			{
				iStatusValue = atoi(sResponse);	
				if(iCurrentCommand = ciPower)
				{
					Power_Value = 65535;	
					Power_Value = iStatusValue;
				}
				else if(iCurrentCommand = ciInput)
				{
					Input_Value = 65535;	
					Input_Value = iStatusValue;
				}
				else if(iCurrentCommand = ciTV)
				{
					TV_Value = 65535;
					TV_Value = iStatusValue;
				}
				else if(iCurrentCommand = ciAVMode)
				{
					AV_Mode_Value = 65535;
					AV_Mode_Value = iStatusValue;
				}

				else if(iCurrentCommand = ciAspect)
				{
					Aspect_Value = 65535;
					Aspect_Value = iStatusValue;
				}

				else if(iCurrentCommand = ciThreeDMode)
				{
					ThreeD_Mode_Value = 65535;
                    ThreeD_Mode_Value = iStatusValue;
				}
                     	
				else if(iCurrentCommand = ciMute)
				{
					Mute_Value = 65535;
					Mute_Value = iStatusValue;
				}
				else if(iCurrentCommand = ciVolume)
				{
					Volume_Value = iStatusValue;
					iVolumeCurrent = iStatusValue;
					iVolumeRequest = ciClear;
				}
				else if(iCurrentCommand = ciChannel)
				{
					//update each value if it differs from the previous one
					if (iStatusValue <> iChannelCurrent)
					{
						iChannelCurrent = iStatusValue;
						Channel_Value = iStatusValue;
					}

					//do the same for the serial version
					if (sResponse <> sCurrentChannel)
					{
						sCurrentChannel = sResponse;
						Channel_Text = sResponse;
					}
					iChannelRequest = ciClear;
				}
				else if(iCurrentCommand = ciRS232)
				{
					iRS232Current = iStatusValue;
					RS232_Power_Value = iRS232Current;					
					if(iRS232Current = 0)
					{
						iRS232Request = 1;
					}
				}
				iWaitingForStatus = 1;
				delay(50);
				SendNextCommand();
			}
		}
	}
}

PUSH KP
{
	INTEGER aLoc;

	switch(getlastmodifiedarrayindex())
	{
		case(1):
			makestring(sNumber, "%s0", sNumber);
		case(2):
			makestring(sNumber, "%s1", sNumber);
		case(3):
			makestring(sNumber, "%s2", sNumber);
		case(4):
			makestring(sNumber, "%s3", sNumber);
		case(5):
			makestring(sNumber, "%s4", sNumber);
		case(6):
			makestring(sNumber, "%s5", sNumber);
		case(7):
			makestring(sNumber, "%s6", sNumber);
		case(8):
			makestring(sNumber, "%s7", sNumber);
		case(9):
			makestring(sNumber, "%s8", sNumber);
		case(10):
			makestring(sNumber, "%s9", sNumber);
		case(11):
		{		
			aLoc = find(".", sNumber);
			if(aLoc = 0)
			{
				makestring(sNumber, "%s.", sNumber);
			}
		}
		case(12):
		{
			clearbuffer(sNumber);
		}
		case(13):
		{	
			aLoc = find(".", sNumber);
			if(aLoc <> 0)
			{
				if(Air)
				{
					makestring(sChannelF, "%02d", atoi(left(sNumber, aLoc - 1)));
					makestring(sChannelR, "%02d", atoi(right(sNumber, len(sNumber) - aLoc)));
					makestring(sChannelTemp, "DA2P%s%s\r", sChannelF, sChannelR);
					iSplit = 0;
				}
				else if(Cable)
				{
					makestring(sChannelF, "%03d", atoi(left(sNumber, aLoc - 1)));
					makestring(sChannelR, "%03d", atoi(right(sNumber, len(sNumber) - aLoc)));
					makestring(sChannelTemp, "DC2U%s \rDC2L%s \r", sChannelF, sChannelR);
					iSplit = 1;
				}
		   	}
			else
			{
				if(Air)
				{
					makestring(sChannelF, "%02d", atoi(sNumber));
					makestring(sChannelTemp, "DCCH%s  \r", sChannelF);
					iSplit = 0;
				}
				else if(Cable)
				{
					makestring(sChannelF, "%03d", atoi(sNumber));
					makestring(sChannelTemp, "DCCH%s \r", sChannelF);
					iSplit = 0;
				}
			}
			iChannelRequest = 1;
			if(iWaitingForStatus = 0)
			{
				iWaitingForStatus = 1;
				SendNextCommand();
			}
			clearbuffer(sNumber);
		}
    }
	Number_Text = sNumber;
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	iPollIndex = 0;
	iWaitingForStatus = 0;
	iAttempts = 0;
	Poll_Request_Send = 0;
	iPowerRetry = 0;
}
