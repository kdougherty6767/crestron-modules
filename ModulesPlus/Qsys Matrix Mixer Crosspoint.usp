#CATEGORY "46" "Qsys" // Custom
#SYMBOL_NAME "Qsys Matrix Mixer Crosspoint"

#USER_SIMPLSHARP_LIBRARY "QscQsys"

Digital_Input MuteOn, MuteOff, GainUp, GainDown;
Analog_Input Gain;
Digital_Output MuteIsOn, MuteIsOff;
Analog_Output _skip_,_skip_, GainValue;

QsysMatrixMixerCrosspoint mixer;

String_Parameter _skip_,_skip_,_skip_,_skip_,_skip_, CoreID[100], ComponentName[100];
Integer_Parameter Input, Output, GainStep, GainRepeatTime;

#BEGIN_PARAMETER_PROPERTIES GainRepeatTime
    propValidUnits = unitTime;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES CoreID
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "1";
#END_PARAMETER_PROPERTIES


integer currentGain;
integer newDirection;

function GainRepeat(integer direction)
{
	newDirection = direction;

    if(newDirection = 1 && currentGain <= 65535 - GainStep)
    	mixer.SetCrossPointGain(currentGain + GainStep);
    else if(newDirection = 1 && currentGain > 65535 - GainStep)
        mixer.SetCrossPointGain(65535);
	else if(newDirection = 0 && currentGain >= 0 + GainStep)
		mixer.SetCrossPointGain(currentGain - GainStep);
    else if(newDirection = 0 && currentGain < 0 + GainStep)
        mixer.SetCrossPointGain(0);

    wait(GainRepeatTime, vRepeat)
    {
        GainRepeat(newDirection);
    }
}

Push GainUp
{
    GainRepeat(1);
}

Release GainUp
{
    CancelWait(vRepeat);
}

Push GainDown
{
    GainRepeat(0);
}

Release GainDown
{
    CancelWait(vRepeat);
}

Threadsafe Change Gain
{
    integer x;

    if(Gain = 0)
    {
        mixer.SetCrossPointGain(0);
    }
    else 
    {
        While(x != Gain)
        {
            x = Gain;
            mixer.SetCrossPointGain(x);
        }
    }
}

Push MuteOn
{
    mixer.SetCrossPointMute(1);
}

Push MuteOff
{
    mixer.SetCrossPointMute(0);
}

Callback Function onCrossPointMuteChange(string cName, integer value)
{
    if(value = 1)
    {
        MuteIsOff = OFF;
        MuteIsOn = ON;
    }
    else
    {
        MuteIsOn = OFF;
        MuteIsOff = ON;
    }
}

callback function onCrossPointGainChange(string cName, integer value)
{
    currentGain = value;
    GainValue = value;
}

Function Main()
{      
    RegisterDelegate(mixer, newCrossPointMuteChange, onCrossPointMuteChange);
    RegisterDelegate(mixer, newCrossPointGainChange, onCrossPointGainChange);
    mixer.Initialize(CoreID, ComponentName, Input, Output);            
}
