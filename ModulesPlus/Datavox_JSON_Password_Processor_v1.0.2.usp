/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
 DIGITAL_INPUT Password_Compare, Password_Save, Password_Text_Clear, Debug, User_Select_FB, Admin_Select_FB, Backdoor_Select_FB, Initialize;
// ANALOG_INPUT 
 STRING_INPUT User_Password$[100], Admin_Password$[100], Backdoor_Password$[100], Password_In$[100];

//BUFFER_INPUT 

 DIGITAL_OUTPUT User_Password_Correct, Admin_Password_Correct, Backdoor_Password_Correct, Any_Password_Correct, Password_Wrong, Password_Saved_FB, Password_Save_Failed_FB, File_Read_Success_FB, Initialize_FB;
// ANALOG_OUTPUT 
 STRING_OUTPUT Password_Text$, Password_Star$, Debug_Out$;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
//INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
 STRING Password_Compare_Text[100], User_Password_Comp$[100], Admin_Password_Comp$[100], Backdoor_Password_Comp$[100], Password_In_Comp$[100], Password_Save_Comp$[100];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/



/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
       
PUSH Password_Compare
{
	integer length;
	length = len(Password_Compare_Text);
	If(Debug = 1)
	{
	MakeString(Debug_Out$, "Debug: S+ - Password_Compare: Verify Length - Password_Compare_Text Length = %d", length);
    }
	If(Len(Password_Compare_Text) > 0)
	{
		If(Debug = 1)
		{
		MakeString(Debug_Out$, "Debug: S+ - Password_Compare: Password_Compare_Text Length > 0 with String = %s", Password_Compare_Text);
    	}
		If(Password_Compare_Text = User_Password_Comp$)
		{
        	Pulse(250, User_Password_Correct);
			Pulse(250, Any_Password_Correct);
		}
		Else If(Password_Compare_Text = Admin_Password_Comp$)
		{
        	Pulse(250, Admin_Password_Correct);
			Pulse(250, Any_Password_Correct);
		}
		Else If(Password_Compare_Text = Backdoor_Password_Comp$)
		{
        	Pulse(250, Backdoor_Password_Correct);
			Pulse(250, Any_Password_Correct);
		}
		Else If(Password_Compare_Text != User_Password_Comp$ && Password_Compare_Text != Admin_Password_Comp$ && Password_Compare_Text != Backdoor_Password_Comp$)
		{
			If(Debug = 1)
			{
			MakeString(Debug_Out$, "Debug: S+ - Password_Compare: !No Match! - User_Password$ = %s, Admin_Password$ = %s, Backdoor_Password$ = %s", User_Password_Comp$, Admin_Password_Comp$, Backdoor_Password_Comp$);
        	}
			Pulse(250, Password_Wrong);
		}
		wait(20)
		{
		Password_Star$ = "";
		Password_Compare_Text = "";
		}	
	}
}

PUSH Password_Text_Clear
{
		Password_Star$ = "";
		Password_Compare_Text = "";
		Password_Text$ = "";
}
 
PUSH Password_Save
{
	String PasswordString[100];
	PasswordString = Password_Save_Comp$;
	If(User_Select_FB = 1)
	{
		If(Debug = 1)
		{
		MakeString(Debug_Out$, "Debug: S+ - Password_Save: PasswordString = %s, User_Password_Comp = %s", PasswordString, User_Password_Comp$);
    	}
        If(PasswordString = User_Password_Comp$)
		{
    		Pulse(250, Password_Saved_FB);	
		}
		Else
		{
        	Pulse(250, Password_Save_Failed_FB);
		}
	}

	Else If(Admin_Select_FB = 1)
	{
		If(Debug = 1)
		{
		MakeString(Debug_Out$, "Debug: S+ - Password_Save: PasswordString = %s, Admin_Password_Comp = %s", PasswordString, Admin_Password_Comp$);
    	}
        If(PasswordString = Admin_Password_Comp$)
		{
    		Pulse(250, Password_Saved_FB);	
		}
		Else
		{
        	Pulse(250, Password_Save_Failed_FB);
		}
	}

	Else If(Backdoor_Select_FB = 1)
	{
		If(Debug = 1)
		{
		MakeString(Debug_Out$, "Debug: S+ - Password_Save: PasswordString = %s, Backdoor_Password_Comp = %s", PasswordString, Backdoor_Password_Comp$);
    	}   
		If(PasswordString = Backdoor_Password_Comp$)
		{
    		Pulse(250, Password_Saved_FB);	
		}
		Else
		{
        	Pulse(250, Password_Save_Failed_FB);
		}

	}
}

Threadsafe Change Password_In$
{
	string sTemp[100];
	integer i;
	integer length;
	length = len(Password_In$);
	If(Debug = 1)
	{
	MakeString(Debug_Out$, "Debug: S+ - Password_In$ Change: Password_In$ = %s Password_In$ Length = %d", Password_In$, length);
    }
	If(User_Select_FB = 1 || Admin_Select_FB = 1 || Backdoor_Select_FB = 1)
	{
    	Password_Save_Comp$ = Password_In$;
	}
	Password_In_Comp$ = Password_In$;
	if(len(Password_In$) = 0)
	{
		sTemp = "";
	}
	if(len(Password_In_Comp$) > 0)
	{
		Password_Star$ = sTemp;
		Password_Compare_Text = Password_In_Comp$;
		Password_Text$ = Password_In_Comp$;
    	If(Debug = 1)
		{
			length = len(Password_In_Comp$);
			MakeString(Debug_Out$, "Debug: S+ - Password_In$ Change: Password_In_Comp$ Length > 0 - Password_In_Comp$ = %s Password_In_Comp$ Length = %d", Password_In_Comp$, length);
    	}
		for(i = 1 to len(Password_In_Comp$))
		{
			if(len(sTemp) >= 1)
			{	
			sTemp = sTemp + "*";
			}
			else
			{
             	sTemp = "*";
			}
		}
		Makestring(Password_Star$, "%s", sTemp);
		If(Debug = 1)
		{
			length = len(sTemp);
			MakeString(Debug_Out$, "Debug: S+ - Password_Star$ Change: Password_Star$ = %s Password_Star$ Length = %d", sTemp, length);
    	}
	}
	else
	{
		delay(10);
    	Password_Compare_Text = "";
		Password_Star$ = "";
		Password_Text$ = "";
	}
}

Threadsafe Change User_Password$
{
	User_Password_Comp$ = User_Password$;
}

Threadsafe Change Admin_Password$
{
	Admin_Password_Comp$ = Admin_Password$;
}
 
Threadsafe Change Backdoor_Password$
{
	Backdoor_Password_Comp$ = Backdoor_Password$;
}

Push Initialize
{
	Initialize_FB = 0;
	Delay(250);
	If(len(User_Password$) > 0 || len(Admin_Password$) > 0 || len(Backdoor_Password$) > 0)
	{
		Initialize_FB = 1;
		Pulse(250, File_Read_Success_FB);
	}
}

/******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/

