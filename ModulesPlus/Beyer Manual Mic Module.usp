/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Design Electronics
System Name: Brampton Council Chambers
System Number:
Programmer: DARREN fOUSERT
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT numMics 23
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
//#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT AllOff, micToggle[numMics], micButton[numMics], isMaster[numMics];
Analog_Input micStatus[numMics];

DIGITAL_OUTPUT TurnMicOn[numMics], TurnMicOff[numMics], TurnMicLEDOn[numMics];
/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
//STRING_PARAMETER micID[4];

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
//INTEGER busyflag, outtemp[numMics],i;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
//STRING garbage$[2000],tempString$[200];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
      
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

/*
RELEASE input
{
    // TODO:  Add code here
}
*/
PUSH MicButton
{
	if (micStatus[getlastmodifiedarrayindex()] = 3)
	{
		Pulse(1,TurnMicOff[getlastmodifiedarrayindex()]);
	}
	else 
	{
		if (isMaster[getlastmodifiedarrayindex()])
		{
			Pulse(1,TurnMicOn[getlastmodifiedarrayindex()]);
			Pulse(1,TurnMicLEDOn[getlastmodifiedarrayindex()]);
		}
	}	
}    
PUSH MicToggle
{
	if (micStatus[getlastmodifiedarrayindex()] = 3)
	{
		Pulse(1,TurnMicOff[getlastmodifiedarrayindex()]);
	}
	else
	{
		Pulse(1,TurnMicOn[getlastmodifiedarrayindex()]);
	}
}
 
PUSH AllOff
{
	integer i;
	For (i = 1 to numMics)
	{
		Pulse(1,TurnMicOff[i]);
		delay(10);
	} 
	

}
/*
EVENT
{
    // TODO:  Add code here
}
*/


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	integer i;
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

	WaitForInitializationComplete();
	//busyflag = 0;
	for (i = 1 to numMics)
	{
		TurnMicOff[i] = 0;
		TurnMicOn[i] = 0;
		//micIsOn[i] = 0;
		//micIsRTS[i] = 0;
		//micIsOff[i] = 1;
		//micStatus[i] = 0;
    }
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}

