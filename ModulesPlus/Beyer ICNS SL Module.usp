/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
   #SYMBOL_NAME "Beyer ICNS SL Module OLD KGD"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// DIGITAL_INPUT 
// ANALOG_INPUT 
   BUFFER_INPUT fromICNS$[3000];
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
   ANALOG_OUTPUT voteOC,
				 voteState,
				 conferenceState;
   STRING_OUTPUT toICNS$,
				 conferenceName$,
				 conferenceID$,
				 Header$,
				 End$,
				 DelegatesInfo$[27];
				 

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER


/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
   STRING temp$[3000];
   STRING subTemp1$[1500];
   STRING subTemp2$[1500];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/

/*
RELEASE input
{
    // TODO:  Add code here
}
*/

          
THREADSAFE CHANGE fromICNS$
{
	integer x;
	integer b1;
	integer b2;
	integer p1;
	integer p2;
	integer p3;
	string subMain$[255];
	string tempDelegates$[26][255];
   
	if (byte(fromICNS$,2) = 0x01)
	{ 
		delay(5);
		temp$ = fromICNS$;			
		b1=byte(temp$, 1)+1;
	
		subMain$ = removebylength(b1, Temp$);
		makestring(Header$, "%s", subMain$);
	
		setarray(tempDelegates$, "N");
	
    	if(byte(temp$, 1)<>0x06)
		{
			b1=byte(temp$, 1)+1;
			b2=byte(temp$, 3);
			While(b2=1)
			{
				subMain$ = removebylength(b1, Temp$);
				makestring(tempDelegates$[(byte(subMain$, 8))-1], "%s", subMain$);
				b1=byte(temp$, 1)+1;
				b2=byte(temp$, 3);
			}
		}
				x=0;
				While(x<26)
				{
					DelegatesInfo$[x+1] = tempDelegates$[x];
					x = x+1;
				}
			
		
		b1=byte(temp$, 1)+1;
	
		subMain$ = removebylength(b1, Temp$);
		makestring(End$, "%s", subMain$);
		clearbuffer(fromICNS$);	
			
	}
	
	else if (byte(fromICNS$, 2)=0x55)
	{
     	makestring(toICNS$, "\x08\x55\x01\x01\x01\x01\x01\x01\xFF");
		clearbuffer(fromICNS$);
	}

	else if (byte(fromICNS$, 2)=0x05)
	{
     	temp$ = fromICNS$;
		
			switch(byte(temp$, 3))
			{
				case (0x00):
				{
					voteOC = 0;
				}
				case (0x01):
				{
					voteOC = 1;
				}
			}
		clearbuffer(fromICNS$);
	}

	else if (byte(fromICNS$, 2)=0x06)
	{
     	temp$ = fromICNS$;
		
			switch(byte(temp$, 3))
			{
				case (0x00):
				{
					voteState = 0;
				}
				case (0x01):
				{
					voteState = 1;
				}
			}
		clearbuffer(fromICNS$);
	}

	else if(byte(fromICNS$, 2)=0x0A||0x10)
		{
			temp$ = fromICNS$;
			while(len(temp$)>0)
			{
				if(byte(temp$, 2)=0x0A)
				{
					subTemp1$=removebylength(byte(temp$, 1), Temp$);
					p1=byte(subTemp1$, 4);
					p2=byte(subTemp1$, 3);
					p3=byte(subTemp1$, (byte(subTemp1$, 3) + 4)); 
					subMain$=mid(subTemp1$, p1, p2);
					makestring(conferenceID$, "%s", subMain$);
					conferenceState=p3;
				}
				else if(byte(temp$, 2)=0x10)
				{
					subTemp1$=removebylength(byte(temp$, 1), Temp$);
					p1=byte(subTemp1$, 4);
					p2=byte(subTemp1$, 3);
					p3=byte(subTemp1$, (byte(subTemp1$, 3) + 4)); 
					subMain$=mid(subTemp1$, p1, p2);
					makestring(conferenceName$, "%s", subMain$);
				}
				else
				{
					clearbuffer(temp$);
				}
				
			}
		}	

	else
		{
			clearbuffer(fromICNS$);	   	 
		}
	clearbuffer(fromICNS$);
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

	WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}


