/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Jandy AquaLink RS Set Point Driver v4.0"
// #HINT ""
#DEFINE_CONSTANT	ciMAXCELSIUS		40
#DEFINE_CONSTANT	ciMINCELSIUS		1

#DEFINE_CONSTANT	ciMAXFAHRENHEIT		104
#DEFINE_CONSTANT	ciMINFAHRENHEIT		34

#DEFINE_CONSTANT	ciDEGREESF			0x46
#DEFINE_CONSTANT	ciDEGREESC			0x43
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT	Pool_Set_Point_Up, Pool_Set_Point_Down,
				Spa_Set_Point_Up, Spa_Set_Point_Down;
ANALOG_INPUT	Pool_Scale_In, Pool_Set_Point_In, Pool_Set_Point_Request_In,
				Spa_Scale_In, Spa_Set_Point_In, Spa_Set_Point_Request_In;
// STRING_INPUT 
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
ANALOG_OUTPUT	Pool_Set_Point, Spa_Set_Point;
STRING_OUTPUT	To_Device;
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER	iPoolSP, iSpaSP, iPoolSPRequest, iSpaSPRequest, iPoolScale, iSpaScale,
		iPoolSPChanging, iSpaSPChanging;
/*******************************************************************************************
  Functions
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
Function fPoolWait()
{
	wait(200, wPoolSend)
	{
		makestring(To_Device, "#POOLSP=%u\x0D", iPoolSPRequest);
		iPoolSPChanging = 0;
	}
}

Function fSpaWait()
{
	wait(200, wSpaSend)
	{
		makestring(To_Device, "#SPASP=%u\x0D", iSpaSPRequest);
		iSpaSPChanging = 0;
	}
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Pool_Set_Point_Up
{
	if(iPoolScale = ciDEGREESF)
	{
		if(iPoolSPRequest < ciMAXFAHRENHEIT)
		{
			iPoolSPRequest = iPoolSPRequest + 1;
			Pool_Set_Point = iPoolSPRequest;
			iPoolSPChanging = 1;
		}
		else if(iPoolSPRequest > ciMAXFAHRENHEIT)
		{
			iPoolSPRequest = ciMAXFAHRENHEIT;
		}
	}
	else if(iPoolScale = ciDEGREESC)
	{
		if(iPoolSPRequest < ciMAXCELSIUS)
		{
			iPoolSPRequest = iPoolSPRequest + 1;
			Pool_Set_Point = iPoolSPRequest;
			iPoolSPChanging = 1;
		}
		else if(iPoolSPRequest > ciMAXCELSIUS)
		{
			iPoolSPRequest = ciMAXCELSIUS;
		}
	}
}

PUSH Pool_Set_Point_Down
{
	if(iPoolScale = ciDEGREESF)
	{
		if(iPoolSPRequest > ciMINFAHRENHEIT)
		{
			iPoolSPRequest = iPoolSPRequest - 1;
			Pool_Set_Point = iPoolSPRequest;
			iPoolSPChanging = 1;
		}
		else if(iPoolSPRequest < ciMINFAHRENHEIT)
		{
			iPoolSPRequest = ciMINFAHRENHEIT;
		}
	}
	else if(iPoolScale = ciDEGREESC)
	{
		if(iPoolSPRequest > ciMINCELSIUS)
		{
			iPoolSPRequest = iPoolSPRequest - 1;
			Pool_Set_Point = iPoolSPRequest;
			iPoolSPChanging = 1;
		}
		else if(iPoolSPRequest < ciMINCELSIUS)
		{
			iPoolSPRequest = ciMINCELSIUS;
		}
	}
}

RELEASE Pool_Set_Point_Up, Pool_Set_Point_Down
{
	if(iPoolSPRequest <> iPoolSP)
	{
		cancelwait(wPoolSend);
		fPoolWait();
	}
}

CHANGE Pool_Scale_In
{
	iPoolScale = Pool_Scale_In;
}

CHANGE Pool_Set_Point_In
{
	if(iPoolSPChanging = 0)
	{
		iPoolSP = Pool_Set_Point_In;
		iPoolSPRequest = iPoolSP;
		Pool_Set_Point = iPoolSP;
	}
}

CHANGE Pool_Set_Point_Request_In
{
	if(iPoolScale = ciDEGREESF)
	{
		if((Pool_Set_Point_Request_In > ciMINFAHRENHEIT) && (Pool_Set_Point_Request_In < ciMAXFAHRENHEIT))
		{
			iPoolSPRequest = Pool_Set_Point_Request_In;
			Pool_Set_Point = iPoolSPRequest;
			makestring(To_Device, "#POOLSP=%u\x0D", iPoolSPRequest);
			iPoolSPChanging = 0;
		}
	}
	else if(iPoolScale = ciDEGREESC)
	{
		if((Pool_Set_Point_Request_In > ciMINCELSIUS) && (Pool_Set_Point_Request_In < ciMAXCELSIUS))
		{
			iPoolSPRequest = Pool_Set_Point_Request_In;
			Pool_Set_Point = iPoolSPRequest;
			makestring(To_Device, "#POOLSP=%u\x0D", iPoolSPRequest);
			iPoolSPChanging = 0;
		}
	}
}

PUSH Spa_Set_Point_Up
{
	if(iSpaScale = ciDEGREESF)
	{
		if(iSpaSPRequest < ciMAXFAHRENHEIT)
		{
			iSpaSPRequest = iSpaSPRequest + 1;
			Spa_Set_Point = iSpaSPRequest;
			iSpaSPChanging = 1;
		}
		else if(iSpaSPRequest > ciMAXFAHRENHEIT)
		{
			iSpaSPRequest = ciMAXFAHRENHEIT;
		}
	}
	else if(iSpaScale = ciDEGREESC)
	{
		if(iSpaSPRequest < ciMAXCELSIUS)
		{
			iSpaSPRequest = iSpaSPRequest + 1;
			Spa_Set_Point = iSpaSPRequest;
			iSpaSPChanging = 1;
		}
		else if(iSpaSPRequest > ciMAXCELSIUS)
		{
			iSpaSPRequest = ciMAXCELSIUS;
		}
	}
}

PUSH Spa_Set_Point_Down
{
	if(iSpaScale = ciDEGREESF)
	{
		if(iSpaSPRequest > ciMINFAHRENHEIT)
		{
			iSpaSPRequest = iSpaSPRequest - 1;
			Spa_Set_Point = iSpaSPRequest;
			iSpaSPChanging = 1;
		}
		else if(iSpaSPRequest < ciMINFAHRENHEIT)
		{
			iSpaSPRequest = ciMINFAHRENHEIT;
		}
	}
	else if(iSpaScale = ciDEGREESC)
	{
		if(iSpaSPRequest > ciMINCELSIUS)
		{
			iSpaSPRequest = iSpaSPRequest - 1;
			Spa_Set_Point = iSpaSPRequest;
			iSpaSPChanging = 1;
		}
		else if(iSpaSPRequest < ciMINCELSIUS)
		{
			iSpaSPRequest = ciMINCELSIUS;
		}
	}
}

RELEASE Spa_Set_Point_Up, Spa_Set_Point_Down
{
	if(iSpaSPRequest <> iSpaSP)
	{
		cancelwait(wSpaSend);
		fSpaWait();
	}
}

CHANGE Spa_Scale_In
{
	iSpaScale = Spa_Scale_In;
}

CHANGE Spa_Set_Point_In
{
	if(iSpaSPChanging = 0)
	{
		iSpaSP = Spa_Set_Point_In;
		iSpaSPRequest = iSpaSP;
		Spa_Set_Point = iSpaSP;
	}
}

CHANGE Spa_Set_Point_Request_In
{
	if(iSpaScale = ciDEGREESF)
	{
		if((Spa_Set_Point_Request_In > ciMINFAHRENHEIT) && (Spa_Set_Point_Request_In < ciMAXFAHRENHEIT))
		{
			iSpaSPRequest = Spa_Set_Point_Request_In;
			Spa_Set_Point = iSpaSPRequest;
			makestring(To_Device, "#SPASP=%u\x0D", iSpaSPRequest);
			iSpaSPChanging = 0;
		}
	}
	else if(iSpaScale = ciDEGREESC)
	{
		if((Spa_Set_Point_Request_In > ciMINCELSIUS) && (Spa_Set_Point_Request_In < ciMAXCELSIUS))
		{
			iSpaSPRequest = Spa_Set_Point_Request_In;
			Spa_Set_Point = iSpaSPRequest;
			makestring(To_Device, "#SPASP=%u\x0D", iSpaSPRequest);
			iSpaSPChanging = 0;
		}
	}
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	waitforinitializationcomplete();
	iPoolSP = 80;
	iPoolScale = ciDEGREESF;
	iPoolSPRequest = iPoolSP;
	iPoolSPChanging = 0;
	Pool_Set_Point = iPoolSP;
	iSpaSP = 95;
	iSpaScale = ciDEGREESF;
	iSpaSPRequest = iSpaSP;
	iSpaSPChanging = 0;
	Spa_Set_Point = iSpaSP;
}

