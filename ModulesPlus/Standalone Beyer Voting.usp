/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:Aatel		
System Name:
System Number:
Programmer:Kelseyd
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
   #SYMBOL_NAME "Standalone Beyer Voting"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
   DIGITAL_INPUT goBack, startVoting, displayResults, stopVoting, voteYes[30], voteNo[30], includeInVote[30];
//   ANALOG_INPUT 
   STRING_INPUT voteName$[100], confName$[100], voterNames$[30][100];
// BUFFER_INPUT 
  
   STRING_OUTPUT majorityText$, twoThirdsText$, toDCU$, toEmail$;
   DIGITAL_OUTPUT  displayingResults, majority, twoThirds, busy, enableVoter[30];
   ANALOG_OUTPUT percentageForWhole, percentageForDec, numberOfVoters, numberOfYes, numberOfNo, voterState[30];


/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER 
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
   INTEGER vStage, percentForDec, percentForMod, percentForWhole , percentFor, numV, numY, numN, idx, ctr, votingActive, vState[31], vInc[31];
// LONG_INTEGER 
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
   STRING twoThirdsInternal$[40], majorityInternal$[40], vName$[100], cName$[100], indResult$[31][50];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

Change voteName$
{
 	vName$ = voteName$;
}

Change confName$
{
 	cName$ = confName$;
}


PUSH includeInVote
{
 	idx = getlastmodifiedarrayindex();
	
	if(vInc[idx] = off)
	{
		vInc[idx] = on;
		voterState[idx] = 1;
	}
	else 
	{
		vInc[idx] = off;
		voterState[idx] = 0;
	}
}



PUSH startVoting
{
    busy = on;
	votingActive = on;
	numV =0;
	vStage = 1;
	for(ctr = 1 to 30)
	{
     	if(vInc[ctr] = on)
		{
         	numV = numV + 1;
			voterState[ctr]=0;
			makestring(toDCU$, "\x08\x6B\x01\x01%s\x00\x02\x00\x01", chr(ctr));
			delay(3);
			makestring(toDCU$, "\x08\x6B\x01\x01%s\x00\x04\x00\x01", chr(ctr)); 
		}
		else voterState[ctr]=3;
	}
	busy = off;	
}

PUSH goBack
{
	vStage = 0;
 	for(ctr = 1 to 30)
	{
     	if(vInc[ctr] = on)
		{
			voterState[ctr] = 1;
		}
		else voterState[ctr] = 0;
	}
}


PUSH voteYes
{
	if(votingActive = on && vStage = 1)
	{
 		idx = getlastmodifiedarrayindex();
		if(vInc[idx] = on)
		{
			vState[idx] = 1;
			voterState[idx] = vState[idx];
		}
	}
}

PUSH voteNo
{
	if(votingActive = on && vStage = 1)
	{
 		idx = getlastmodifiedarrayindex();
		if(vInc[idx] = on)
		{
			vState[idx] = 2;
			voterState[idx] = vState[idx];
		}
	}
}

PUSH displayResults
{
 	busy = on;
	numY = 0;
	numN = 0;
	vStage = 2;
	for(ctr = 1 to 30)
	{
    	if(vState[ctr] = 1)
		{
			numY = numY+1;
			makestring(indResult$[ctr], "%s: Yes", voterNames$[ctr]);
		}
		else if(vState[ctr] = 2)
		{
			numN = numN+1;
			makestring(indResult$[ctr], "%s: No", voterNames$[ctr]);
		}
		else makestring(indResult$[ctr], "%s: Absent", voterNames$[ctr]);
	}
	
	numV = numY + numN;
	numberOfYes = numY;
	numberOfNo = numN;
	numberOfVoters = numV;

	percentForWhole = (numY*100)/numV;
	percentForMod = (numY*100) MOD numV;
	percentForDec = (percentForMod*100)/numV;

	percentageForWhole = percentForWhole;
	percentageForDec = percentForDec;



	if(percentForWhole <= 50)
	{
     	majority = off;
		makestring(majorityInternal$, "Motion Defeated");
	}
	else 
	{
		majority = on;
		makestring(majorityInternal$, "Motion Passed");
	}
	majorityText$ = majorityInternal$;

	if(percentForWhole < 66)
	{
     	twoThirds = off;
		makestring(twoThirdsInternal$, "Motion Defeated");
	}
	else 
	{
		twoThirds = on;
		makestring(twoThirdsInternal$, "Motion Passed");
	}
	twoThirdsText$ = twoThirdsInternal$;

	makeString(toEmail$, "Vote Name: %s\n\nTotal Voted: %u\nTotal Yes: %u\nTotal No: %u\nPercent For: %u\n\nMajority: %s\nTwo Thirds: %s\n\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s", 
	vName$, numV, numY, numN, percentForWhole, majorityInternal$, twoThirdsInternal$,
	indResult$[7],indResult$[8],indResult$[9],indResult$[10],indResult$[11],
	indResult$[12],indResult$[13],indResult$[14],indResult$[15],indResult$[16],indResult$[17]);
	
	busy = off;
	displayingResults = on;
	
}

PUSH stopVoting
{
	displayingResults = off;
	votingActive = off;
    vStage = 0;
	
 	for(ctr = 1 to 30)
	{
		vState[ctr] = 0;
		voterState[ctr] = 1;
		vInc[ctr] = on;
		makestring(toDCU$, "\x08\x6B\x01\x01%s\x00\x02\x00\x00", chr(ctr));
		delay(3);
		makestring(toDCU$, "\x08\x6B\x01\x01%s\x00\x04\x00\x00", chr(ctr));		
	}
}


/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

       WaitForInitializationComplete();
	displayingResults = off;
	votingActive = off;
    vStage = 0;
	
 	for(ctr = 1 to 30)
	{
		vState[ctr] = 0;
		voterState[ctr] = 1;
		vInc[ctr] = on;
	}
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}


