/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
   #SYMBOL_NAME "Beyer ICNS Station KGD"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
   DIGITAL_INPUT micToggle, resetSpkCount;
   ANALOG_INPUT dcuIDHigh, dcuIDLow, sessionID; 
   STRING_INPUT fromFBModule$[255];
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
   ANALOG_OUTPUT micState, speakerPosition;
   DIGITAL_OUTPUT showSpeakerPos; 
   STRING_OUTPUT toICNS$, stationName$, toMainModule$;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
   INTEGER_PARAMETER _skip_;
   INTEGER_PARAMETER _skip_;
   INTEGER_PARAMETER _skip_;
   INTEGER_PARAMETER _skip_;
   INTEGER_PARAMETER _skip_;
   INTEGER_PARAMETER _skip_;
   INTEGER_PARAMETER groupID, logID; 
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
   INTEGER spkCount, lastState;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
   STRING lastValue$[255];
   STRING dbName$[255];
   STRING Trash$[10];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/

/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE fromFBModule$

{
	if(lastValue$<>fromFBModule$)
	{    
        makestring(lastValue$, "%s", fromFBModule$);

		if(fromFBModule$="N")
		{
     	micState=0;
		showSpeakerPos=0;
		speakerPosition=99;
		}
		if(fromFBModule$="C")
		{
     	makestring(stationName$, "");
		}
		if(byte(fromFBModule$, 2)=0x01)
		{
			micState = byte(fromFBModule$, 11);
			speakerPosition = byte(fromFBModule$, 10);
			showSpeakerPos=1;			
		}
		if(byte(fromFBModule$, 2)=0x09)
		{
			dbName$ = fromFBModule$;
			Trash$ = removebylength(4, dbName$);
			makestring(stationName$, "%s", dbName$);
		}
		if(micState = 1 && lastState<>micState)
		{
          	spkCount = spkCount + 1;
		}
		lastState = micState;
		makestring(toMainModule$, "%s%s%s%s%s%s", chr(logID), chr(groupID), chr(speakerPosition), chr(micState), chr(spkCount), dbName$); 
	
	
	}		
}



Push micToggle
{
	makestring(toICNS$, "\x09\x01%s%s%s%s%s\x00\x01\x01", chr(dcuIDLow), chr(dcuIDHigh), chr(sessionID), chr(groupID), chr(logID)); 	
}

Push resetSpkCount
{
	spkCount = 0;
}




/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

	WaitForInitializationComplete();
	makestring(lastValue$, "Z");
	spkCount = 0;
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}


