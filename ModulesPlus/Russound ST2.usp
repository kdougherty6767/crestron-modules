/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT POWERON                58
#DEFINE_CONSTANT POWEROFF               59
#DEFINE_CONSTANT TUNEUP                 47
#DEFINE_CONSTANT TUNEDOWN               48
#DEFINE_CONSTANT PRESETUP               14
#DEFINE_CONSTANT PRESETDOWN             15
#DEFINE_CONSTANT DIRECT_PRESET          22
#DEFINE_CONSTANT SAVEPRESET1            60
#DEFINE_CONSTANT SAVEPRESET2            61
#DEFINE_CONSTANT SAVEPRESET3            62
#DEFINE_CONSTANT SAVEPRESET4            63
#DEFINE_CONSTANT SAVEPRESET5            64
#DEFINE_CONSTANT SAVEPRESET6            65
#DEFINE_CONSTANT DIRECT_BANK            21
#DEFINE_CONSTANT SEEK                   27
#DEFINE_CONSTANT SCAN                   70
#DEFINE_CONSTANT AM                     74
#DEFINE_CONSTANT FM                     73
#DEFINE_CONSTANT STEREO                 51
#DEFINE_CONSTANT MONO                   52
#DEFINE_CONSTANT LOCAL                  66
#DEFINE_CONSTANT DISTANT                67

#DEFINE_CONSTANT DIRECT_TUNING          23
#DEFINE_CONSTANT DIGIT_1                1
// #CATEGORY "" 
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING

#HELP_BEGIN
Only to use with the "Russound ST2.umc" module
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT powerOn$, powerOff$;
DIGITAL_INPUT tuneUp$, tuneDown$;
DIGITAL_INPUT presetUp$, presetDown$;
DIGITAL_INPUT preset1$, preset2$, preset3$, preset4$, preset5$, preset6$;
DIGITAL_INPUT savePreset1$, savePreset2$, savePreset3$;
DIGITAL_INPUT savePreset4$, savePreset5$, savePreset6$;

DIGITAL_INPUT seek$, scan$, stop$;
DIGITAL_INPUT am$, fm$;
DIGITAL_INPUT stereo$, mono$;
DIGITAL_INPUT local$, distant$;

DIGITAL_INPUT directTuning$;
DIGITAL_INPUT freqEntry$[10];
ANALOG_INPUT source$, bank$;
STRING_INPUT controllerAddress$[3];
// STRING_INPUT 
BUFFER_INPUT rx$[2000];

// DIGITAL_OUTPUT 
// ANALOG_OUTPUT 
STRING_OUTPUT directDisplay$;
STRING_OUTPUT tx$;

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// };

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER xOK, marker1, marker2;
STRING tempString[200], sendString[200];

INTEGER source;
STRING controllerAddress[3];

INTEGER i, sum;
STRING returnString[1];

INTEGER x;

INTEGER inverted;

STRING lastString[30], cleanString[30];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

String_Function calcCC(string str)
{
	sum = 0;
	for (i = 1 to len(str))
	{
		sum = sum + byte(str, i);
	}
	sum = sum + len(str);
	returnString = chr(low(sum & 0x007F));
    Return (returnString);
}


Function send(integer command)
{
	makeString(sendString, "\xF0\x00}%s", chr(source-1));
	makeString(sendString, "%s%s", sendString, controllerAddress);
	makeString(sendString, "%s\x05\x02\x01\x00\x02\x01\x00%s", sendString, chr(command));
	makeString(sendString, "%s\x00\x70\x00%s", sendString, chr(source-1));
	makeString(sendString, "%s\x00\x01", sendString);
	makeString(sendString, "%s%s\xF7",sendString, calcCC(sendString)); //\x28
	
	tx$ = sendString;
}

String_Function invert(string invertStr)
{
	marker1 = find("\xF1", invertStr);
	while(marker1)
	{
		inverted = byte(invertStr, marker1) ^ 0xFF;
		makeString(invertStr, "%s%s%s", left(invertStr, marker1-1), chr(inverted), right(invertStr, len(invertStr) - marker1 - 1));
		marker1 = find("\xF1", invertStr, marker1);
	}
	return(invertStr);		
}

String_Function clean(string cleanStr)
{
	if (right(cleanStr, 1) = "\x00")
	{
		
		while (right(cleanStr, 1) = "\x00")
		{
			makeString(cleanStr, "%s", mid(cleanStr, 1, len(cleanStr) - 1));
		}
	}
	return (cleanStr);
}



/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH powerOn$
{
    call send(POWERON);
}


PUSH powerOff$
{
	call send(POWEROFF);
}

PUSH tuneUp$
{
	call send(TUNEUP);
}

PUSH tuneDown$
{
	call send(TUNEDOWN);
}

PUSH presetUp$
{	
	call send(PRESETUP);
}

PUSH presetDown$
{
	call send(PRESETDOWN);
}
                
PUSH preset1$
{
	call send(DIRECT_PRESET);
	call send(DIGIT_1);
}                    
                    
PUSH preset2$
{
	call send(DIRECT_PRESET);
	call send(DIGIT_1 + 1);
}                    
                    
PUSH preset3$
{
	call send(DIRECT_PRESET);
	call send(DIGIT_1 + 2);
}                    
                    
PUSH preset4$
{
	call send(DIRECT_PRESET);
	call send(DIGIT_1 + 3);
}                    
                    
PUSH preset5$
{
	call send(DIRECT_PRESET);
	call send(DIGIT_1 + 4);
}                    
                    
PUSH preset6$
{
	call send(DIRECT_PRESET);
	call send(DIGIT_1 + 5);
}                    
                    
PUSH savePreset1$
{
	call send(SAVEPRESET1);
}

PUSH savePreset2$
{
	call send(SAVEPRESET2);
}

PUSH savePreset3$
{
	call send(SAVEPRESET3);
}

PUSH savePreset4$
{
	call send(SAVEPRESET4);
}

PUSH savePreset5$
{
	call send(SAVEPRESET5);
}

PUSH savePreset6$
{
	call send(SAVEPRESET6);
}

PUSH seek$
{
	call send(SEEK);
}

PUSH scan$
{
	call send(SCAN);
}

PUSH stop$
{
	call send(POWERON);
}

PUSH am$
{
	call send(AM);
}

PUSH fm$
{
	call send(FM);
}

PUSH stereo$
{
	call send(STEREO);
}

PUSH mono$
{
	call send(MONO);
}

PUSH local$
{
	call send(LOCAL);
}

PUSH distant$
{
	call send(DISTANT);
}

PUSH directTuning$
{
	call send(DIRECT_TUNING);
}

PUSH freqEntry$
{
	x = getLastModifiedArrayIndex();
	call send(DIGIT_1 + x - 1);
}

/*
RELEASE input
{
    // TODO:  Add code here
}
*/

CHANGE source$
{
	source = source$;
}


CHANGE bank$
{
	call send(DIRECT_BANK);
	call send(DIGIT_1 + bank$ - 1);
}


CHANGE controllerAddress$
{
	controllerAddress = controllerAddress$;
}


CHANGE rx$
{
	if (xOK = 1)
	{
		xOK = 0;
		while (len(rx$))
		{
			if (find("\xF7", rx$))
			{
				tempString = remove("\xF7", rx$);
				tempString = invert(tempString);
				
				if (mid(tempString, 2, 3) = controllerAddress)
				{
					cleanString = clean(mid(tempString, 24, byte(tempString, 19)-3));
					if (lastString <> cleanString)
					{
						lastString = cleanString;
						directDisplay$ = lastString;
					}
				}
				else if (byte(tempString, 4) = 121)
				{
					if (byte(tempString, 21) = ((source - 1) | 0x10))
					{
						cleanString = clean(mid(tempString, 24, byte(tempString, 19)-3));
						if (lastString <> cleanString)
						{
							lastString = cleanString;
							directDisplay$ = lastString;
						}	
					}		
				}
				
				
				clearbuffer(tempString);
			}
		}
		xOK = 1;		
	}
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	xOK = 1;
	controllerAddress = "\x00\x00\x70";
	source = 1;
}


