/***********************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
***********************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/***********************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
***********************************************************************************/
#SYMBOL_NAME "Honeywell Vista Turbo 128-BPT Queue v1.2"
// #HINT ""
#DEFINE_CONSTANT	ciQUEUESIZE		100
#DEFINE_CONSTANT	ciQUEUELEN		25
#DEFINE_CONSTANT	ciMAXPARTITIONS	8

// #CATEGORY "" 
#CATEGORY "21" // Security
//#PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
// #DEFAULT_NONVOLATILE
// #ENABLE_STACK_CHECKING
//#ENABLE_TRACE
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/
/***********************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
***********************************************************************************/
DIGITAL_INPUT	Init, Poll, Send_Next_In, Receiving, Poll_Partition[ciMAXPARTITIONS];
BUFFER_INPUT	From_Module$[250], From_Device$[250];

DIGITAL_OUTPUT	Send_Next_Out, Communication_On_Fb, Communication_Off_Fb;
STRING_OUTPUT	To_Device$, To_Partition$[ciMAXPARTITIONS];
/***********************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
***********************************************************************************/
INTEGER	iPartitionSent, iNextStore, iNextSend, iNextPoll, iSendOk, iTemp, iFlag1,
		iFlag2, a, b, c, iPollPartitions[ciMAXPARTITIONS];
STRING	sQueue[ciQUEUESIZE][ciQUEUELEN],/* sTemp1[250], sTemp2[50],*/ sTemp3[15],
		sTemp4[30], sModuleRxMsg[50], sComportRxMSg[250];
/***********************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
***********************************************************************************/
String_Function sfCheckSum(STRING fsTemp)
{
	INTEGER a, iTemp;
	
	iTemp = 0;
	for(a = 1 to len(fsTemp))
	{
		iTemp = iTemp + byte(fsTemp, a);
	}
	iTemp = iTemp mod 0x100;
	iTemp = 0x100 - iTemp;
	makestring(fsTemp, "%s%02X\x0D\x0A", fsTemp, iTemp);
	Return (fsTemp);
}
/***********************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
***********************************************************************************/
PUSH Init
{
	if((iSendOk = 1) && (Receiving = 0) && (Communication_On_Fb = 1))
	{
		for(a = 2 to ciMAXPARTITIONS)
		{
			makestring(sTemp3, "09KD%u00", a);
			sQueue[iNextStore] = sfCheckSum(sTemp3);
			iNextStore = iNextStore + 1;
			if(iNextStore > ciQUEUESIZE)
			{
				iNextStore = 1;
			}
		}
		iPartitionSent = 1;
		iSendOk = 0;
		makestring(sTemp3, "09KD%u00", 1);
		To_Device$ = sfCheckSum(sTemp3);
	}
	else
	{
		for(a = 1 to ciMAXPARTITIONS)
		{
			makestring(sTemp3, "09KD%u00", a);
			sQueue[iNextStore] = sfCheckSum(sTemp3);
			iNextStore = iNextStore + 1;
			if(iNextStore > ciQUEUESIZE)
			{
				iNextStore = 1;
			}
		}
	}
}

PUSH Poll
{
	if((iSendOk = 1) && (Receiving = 0) && (Communication_On_Fb = 1))
	{
		iNextPoll = iNextPoll + 1;
		if(iNextPoll > ciMAXPARTITIONS)
		{
			iNextPoll = 1;
		}
		if(Poll_Partition[iNextPoll] = 1)
		{
			iPartitionSent = iNextPoll;
			iSendOk = 0;
			makestring(sTemp3, "09KD%u00", iNextPoll);
			To_Device$ = sfCheckSum(sTemp3);
		}
	}
}

Push Send_Next_In
{
	delay(1);
	Send_Next_Out = 0;
	if((iSendOk = 1) && (Receiving = 0))
	{
		if(len(sQueue[iNextSend]) > 0)
		{
			if(find("09KD", sQueue[iNextSend]) > 0)
			{
				iPartitionSent = atoi(mid(sQueue[iNextSend], 5, 1));
			}
			sTemp4 = sQueue[iNextSend];
			sQueue[iNextSend] = "";
			iNextSend = iNextSend + 1;
			if(iNextSend > ciQUEUESIZE)
			{
				iNextSend = 1;
			}
			iSendOk = 0;
			To_Device$ = sTemp4;
		}
	}
}

Release Receiving
{
	Send_Next_Out = 1;
}

FUNCTION ProcessModuleMessage()
{
    if((iSendOk = 1) && (Receiving = 0))
    {
        To_Device$ = sModuleRxMsg;
        iSendOk = 0;
        sModuleRxMsg = "";
    }
    else
    {
        sQueue[iNextStore] = sModuleRxMsg;
        sModuleRxMsg = "";
        iNextStore = iNextStore + 1;
        if(iNextStore > ciQUEUESIZE)
        {
            iNextStore = 1;
        }
    }
}

#if_series3
threadsafe change From_Module$
{
	while(1)
	{
		try
		{
			sModuleRxmsg = "";
			sModuleRxMsg = gather("\x0D\x0A", From_Module$);
			ProcessModuleMessage();
		}
		catch
		{
			generateusernotice("Honeywell Turbo Queue: Error processing from modules: %s", getexceptionmessage());
		}
	}
}
#else
Change From_Module$
{
	if(iFlag1 = 0)
	{
		iFlag1 = 1;
		while(find("\x0D\x0A", From_Module$) > 0)
		{
			sModuleRxMsg = "";
			sModuleRxMsg = remove("\x0D\x0A", From_Module$);
			ProcessModuleMessage();
		}
		iFlag1 = 0;
	}
}
#endif

FUNCTION ProcessComportMessage()
{
    if(find("29kd", sComportRxMsg) > 0)
    {
        To_Partition$[iPartitionSent] = sComportRxMsg;
        if(Communication_On_Fb = 1)
        {
            iSendOk = 1;
            Send_Next_Out = 1;
        }
    }
    else if(find("08OK009E\x0D\x0A", sComportRxMsg) > 0)
    {
        if(Communication_On_Fb = 1)
        {
            iSendOk = 1;
            Send_Next_Out = 1;
        }
    }
    else if(find("08XN0092\x0D\x0A", sComportRxMsg) > 0)	//Communication On
    {
        delay(10);
        iSendOk = 1;
        Send_Next_Out = 1;
        Communication_Off_Fb = 0;
        Communication_On_Fb = 1;
    }
    else if(find("08XF009A\x0D\x0A", sComportRxMsg) > 0)	//Communication Off
    {
        iSendOk = 0;
        Communication_On_Fb = 0;
        Communication_Off_Fb = 1;
    }
    else if(len(sComportRxMsg) > 3)
    {
        if(Communication_On_Fb = 1)
        {
            iSendOk = 1;
            Send_Next_Out = 1;
        }
    }
}
#if_series3
threadsafe change From_Device$
{
	try
	{
		sComportRxMsg = "";
		sComportRxMsg = gather("\x0D\x0A", From_Device$);
		ProcessComportMessage();
	}
	catch
	{
		generateusernotice("Honeywell Turbo Queue: Error processing from modules: %s", getexceptionmessage());
	}
}
#else
Change From_Device$
{
	if(iFlag2 = 0)
	{
		iFlag2 = 1;
		while(find("\x0D\x0A", From_Device$) > 0)
		{
			sComportRxMsg = "";
			sComportRxMsg = gather("\x0D\x0A", From_Device$);
			ProcessComportMessage();
		}
		iFlag2 = 0;
	}
}
#endif
/***********************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
***********************************************************************************/
Function Main()
{
	setarray(sQueue, "");
	iFlag1 = 0;
	iFlag2 = 0;
	iSendOk = 1;
	Communication_Off_Fb = 0;
	Communication_On_Fb = 1;
	iNextStore = 1;
	iNextSend = 1;
	iNextPoll = 0;
}
