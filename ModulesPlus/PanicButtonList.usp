/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:Aatel
System Name:UHN
System Number:
Programmer:Kelseyd
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
 #SYMBOL_NAME "Panic Button List"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
 DIGITAL_INPUT Initialize, ButtonPress[96];
// ANALOG_INPUT 
 STRING_INPUT ButtonName$[96][100];
// BUFFER_INPUT 

 DIGITAL_OUTPUT Initialized, ItemVisible[96];
// ANALOG_OUTPUT 
 STRING_OUTPUT VociaTx$, NewAlarm$, ItemName$[96];

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

//  Global Variables

INTEGER listLength;
STRING internalList$[96][100];
  
/*
Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function Authenticate()
{
    makestring(VociaTx$, "U crestron\n");
    delay(10);
    makestring(VociaTx$, "P crestron\n");
    delay(10);
    makestring(VociaTx$, "A\n");
    delay(10);
}

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Initialize
{
  integer ctr;
  listLength = 0;
  For(ctr = 1 to 96)
  {
    internalList$[ctr] = "";
    ItemName$[ctr] = internalList$[ctr];
    ItemVisible[ctr] = off;
  }
  
  For(ctr = 1 to 96)
  {
    If(ButtonPress[ctr] = on)
    {
      listLength = listLength + 1;
      internalList$[listLength] = ButtonName$[ctr];
      ItemName$[listLength] = internalList$[listLength];
      ItemVisible[listLength] = on;
    }
  }

	Makestring(VociaTx$, "X A\n");
  
  Initialized = on;
  }


THREADSAFE PUSH ButtonPress
{
  integer ctr;
	integer idx;
  ctr = 1;
  If(Initialized = on)
  {
    idx = getlastmodifiedarrayindex();
	  listLength = listLength + 1;
  	ItemName$[listLength] = ButtonName$[idx];
	  internalList$[listLength] = ButtonName$[idx];
    NewAlarm$ = ButtonName$[idx];
  	ItemVisible[listLength] = on;

    Authenticate();
    If(idx < 10)
    {
      Makestring(VociaTx$, "X P 10%d %d\n", idx, idx);      
    }
    else Makestring(VociaTx$, "X P 1%d %d\n", idx, idx);
  }
	
	    
}



THREADSAFE RELEASE ButtonPress
{
	integer ctr;
	integer idx;
	integer matchIDX;
	string matchFinder$[100];
	If(Initialized = on)
  {
    idx = getlastmodifiedarrayindex();    
	matchFinder$ = ButtonName$[idx];

    For(ctr = 1 to listLength)
	{
     	if(matchFinder$ = internalList$[ctr])
		{
         	matchIDX = ctr;
			break;
		}
	}

	For(ctr = matchIDX to listLength)
	{
     	internalList$[ctr] = internalList$[ctr+1];
	}

	For(ctr = 1 to listLength)
	{
     	ItemName$[ctr] = internalList$[ctr];
	}
	
	ItemVisible[listLength] = off;
	listLength = listLength - 1;

  Authenticate();
  If(idx < 10)
    {
      Makestring(VociaTx$, "X C %d\n", idx);      
    }
    else Makestring(VociaTx$, "X C %d\n", idx);
  }
	 
}




/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

  integer ctr;
     WaitForInitializationComplete();
	
  listLength = 0;
  For(ctr = 1 to 96)
  {
    internalList$[ctr] = "";
    ItemName$[ctr] = internalList$[ctr];
    ItemVisible[ctr] = off;
  }

    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}


