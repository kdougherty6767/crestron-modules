/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Aatel
System Name:
System Number:
Programmer: KelseyD
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
   #SYMBOL_NAME "Beyer ICNS Speaker List KGD"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
   DIGITAL_INPUT speakerPress[29];
   ANALOG_INPUT dcuIDHigh, dcuIDLow, sessionID, numOfVoters;  	  
   STRING_INPUT stationListString[29][100];
// BUFFER_INPUT 

   STRING_OUTPUT  toICNS$;  
   DIGITAL_OUTPUT orderedEnableSpeaker[29];
   ANALOG_OUTPUT orderedSpeakerState[29], orderedSpeakerCount[29];
   STRING_OUTPUT  orderedSpeaker[29];

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
   INTEGER  b1, b2, idx, busy, rerun;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
   STRING list[30][100], temp[100];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function evaluate()
{
    integer ctr, ctr2, ctr3, loops, SortedFlag;
 	busy = on;
	rerun = off;
 	loops=0;


    delay(100);
	For(ctr3=1 to numOfVoters)
 	{
 	 	list[ctr3]=stationListString[ctr3];
 	}

	Trace("Sorting Started");

 	Do
 	{
 	 	SortedFlag=0;
 	 	loops=loops+1;
 	 	Trace("Pass #%d --------------", loops);
 	 	For(ctr=1 to numOfVoters-1)
 	 	{
 	 	 	Trace("Comparing %02d to %02d", ctr, ctr+1);
 	 	 	If((byte(list[ctr], 3))>(byte(list[ctr+1], 3)))
 	 	 	{
 	 	 	 	SortedFlag=1;
 	 	 	 	temp=list[ctr];
 	 	 	 	list[ctr]=list[ctr+1];
 	 	 	 	list[ctr+1]=temp;
 	 	 	 	Trace("Swapped!");
 	 	 	}
 	 	}
 	}Until(SortedFlag=0);
 	
 	For(ctr2=1 to numOfVoters)
 	{
		if(byte(list[ctr2], 4)=0)
		{
			orderedEnableSpeaker[ctr2] = 0;
		} 
		else orderedEnableSpeaker[ctr2] = 1;
		orderedSpeaker[ctr2] = mid(list[ctr2], 6, (len(list[ctr2]))-5);
 	 	orderedSpeakerState[ctr2] = byte(list[ctr2], 4);
		orderedSpeakerCount[ctr2] = byte(list[ctr2], 5);
 	}
	busy = off;
}

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/



/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE stationListString
{
	if(busy = on)
	{
		rerun = on;
		terminateEvent;
	}	
	busy=on;
	evaluate();
	if(rerun = on)
	{
		evaluate();
	}

}


PUSH speakerPress
{
	idx = getlastmodifiedarrayindex();
	b1 = byte(list[idx], 1);
	b2 = byte(list[idx], 2);
	makestring(toICNS$, "\x09\x01%s%s%s%s%s\x00\x01\x01", chr(dcuIDLow), chr(dcuIDHigh), chr(sessionID), chr(b2), chr(b1));   
}



/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/

